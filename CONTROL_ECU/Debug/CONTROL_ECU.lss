
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002256  000022ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800174  00800174  000023fe  2**0
                  ALLOC
  3 .stab         00002454  00000000  00000000  00002400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001460  00000000  00000000  00004854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008451  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000097d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a9b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ab70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ae66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_6>
      1c:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 29 11 	jmp	0x2252	; 0x2252 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 16 11 	jmp	0x222c	; 0x222c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 16 11 	jmp	0x222c	; 0x222c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
 * 		     else FALSE
 */
bool verify_login_password();

int main()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62

	uint8 command;
	/* Enable global interrupt */
	SREG |= (1 << 7);
     e38:	af e5       	ldi	r26, 0x5F	; 95
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ef e5       	ldi	r30, 0x5F	; 95
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	8c 93       	st	X, r24
	/*
	 * Drivers Initialization
	 * UART, DcMotor, Buzzer
	 */
	UART_init(&uart_configurations);
     e46:	8e e6       	ldi	r24, 0x6E	; 110
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <UART_init>
	DcMotor_Init();
     e4e:	0e 94 c0 09 	call	0x1380	; 0x1380 <DcMotor_Init>
	Buzzer_init();
     e52:	0e 94 97 09 	call	0x132e	; 0x132e <Buzzer_init>
	 * 5. Change password
	 */
	/* Program Loop */
	for (;;)
	{
		command = UART_recieveByte();
     e56:	0e 94 55 10 	call	0x20aa	; 0x20aa <UART_recieveByte>
     e5a:	89 83       	std	Y+1, r24	; 0x01
		if (command == UART_LOGIN)
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	19 f4       	brne	.+6      	; 0xe68 <main+0x3a>
		{
			verify_login_password();
     e62:	0e 94 46 07 	call	0xe8c	; 0xe8c <verify_login_password>
     e66:	f7 cf       	rjmp	.-18     	; 0xe56 <main+0x28>
		}
		else if (command == UART_NEW_PASSWORD)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	81 3a       	cpi	r24, 0xA1	; 161
     e6c:	19 f4       	brne	.+6      	; 0xe74 <main+0x46>
		{
			create_password();
     e6e:	0e 94 79 07 	call	0xef2	; 0xef2 <create_password>
     e72:	f1 cf       	rjmp	.-30     	; 0xe56 <main+0x28>
		}
		else if (command == UART_OPEN_DOOR)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	85 30       	cpi	r24, 0x05	; 5
     e78:	19 f4       	brne	.+6      	; 0xe80 <main+0x52>
		{
			open_door();
     e7a:	0e 94 56 09 	call	0x12ac	; 0x12ac <open_door>
     e7e:	eb cf       	rjmp	.-42     	; 0xe56 <main+0x28>
		}
		else if (command == UART_ACTIVATE_ALARM)
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	86 30       	cpi	r24, 0x06	; 6
     e84:	41 f7       	brne	.-48     	; 0xe56 <main+0x28>
		{
			trigger_alarm();
     e86:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <trigger_alarm>
     e8a:	e5 cf       	rjmp	.-54     	; 0xe56 <main+0x28>

00000e8c <verify_login_password>:
 * Outputs : bool
 * 			 TRUE if the password is correct
 * 		     else FALSE
 */
bool verify_login_password()
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	69 97       	sbiw	r28, 0x19	; 25
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Send the command to the HMI ECU to start sending the password
	 * Receive the password from the HMI ECU
	 * Retrieve the password from the EEPROM
	 */
	UART_sendByte(UART_CONFIRMATION);
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	0e 94 3e 10 	call	0x207c	; 0x207c <UART_sendByte>
	UART_receiveString(received_password);
     ea6:	ce 01       	movw	r24, r28
     ea8:	0d 96       	adiw	r24, 0x0d	; 13
     eaa:	0e 94 8d 10 	call	0x211a	; 0x211a <UART_receiveString>
	retrieve_password(password);
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	0e 94 ae 08 	call	0x115c	; 0x115c <retrieve_password>
	/*
	 * Check if the two passwords are the same
	 */
	if (validate_match_passwords(password, received_password) == TRUE)
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	9e 01       	movw	r18, r28
     ebc:	23 5f       	subi	r18, 0xF3	; 243
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	b9 01       	movw	r22, r18
     ec2:	0e 94 b0 07 	call	0xf60	; 0xf60 <validate_match_passwords>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	31 f4       	brne	.+12     	; 0xed6 <verify_login_password+0x4a>
	{
		/*
		 * Send confirmation to the HMI ECU
		 * Return true to the main function
		 */
		UART_sendByte(UART_LOGIN_SUCCESS);
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	0e 94 3e 10 	call	0x207c	; 0x207c <UART_sendByte>
		return TRUE;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 8f       	std	Y+25, r24	; 0x19
     ed4:	04 c0       	rjmp	.+8      	; 0xede <verify_login_password+0x52>
	}
	/*
	 * Send invalid password to the HMI ECU
	 * Return false to the main function
	 */
	UART_sendByte(UART_LOGIN_FAIL);
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	0e 94 3e 10 	call	0x207c	; 0x207c <UART_sendByte>
	return FALSE;
     edc:	19 8e       	std	Y+25, r1	; 0x19
     ede:	89 8d       	ldd	r24, Y+25	; 0x19
}
     ee0:	69 96       	adiw	r28, 0x19	; 25
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <create_password>:
 * Outputs : bool
 * 			 TRUE if the password is matched
 * 		     else FALSE
 */
bool create_password()
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	2d 97       	sbiw	r28, 0x0d	; 13
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
	uint8 first_password[6];
	uint8 second_password[6];
	/*
	 * Send the command to the HMI ECU to start sending the passwords
	 */
	UART_sendByte(UART_CONFIRMATION);
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	0e 94 3e 10 	call	0x207c	; 0x207c <UART_sendByte>
	/*
	 * Receive the passwords from the HMI ECU
	 */
	UART_receiveString(first_password);
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	0e 94 8d 10 	call	0x211a	; 0x211a <UART_receiveString>
	UART_receiveString(second_password);
     f14:	ce 01       	movw	r24, r28
     f16:	07 96       	adiw	r24, 0x07	; 7
     f18:	0e 94 8d 10 	call	0x211a	; 0x211a <UART_receiveString>
	/*
	 * Check if the two passwords are the same
	 */
	if (validate_match_passwords(first_password, second_password) == TRUE)
     f1c:	9e 01       	movw	r18, r28
     f1e:	29 5f       	subi	r18, 0xF9	; 249
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	b9 01       	movw	r22, r18
     f28:	0e 94 b0 07 	call	0xf60	; 0xf60 <validate_match_passwords>
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	51 f4       	brne	.+20     	; 0xf44 <create_password+0x52>
		/*
		 * Store the password in the EEPROM
		 * Send confirmation to the HMI ECU
		 * Return true to the main function
		 */
		store_password(first_password);
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	0e 94 08 08 	call	0x1010	; 0x1010 <store_password>
		UART_sendByte(UART_VALID_PASSWORDS);
     f38:	82 ea       	ldi	r24, 0xA2	; 162
     f3a:	0e 94 3e 10 	call	0x207c	; 0x207c <UART_sendByte>
		return TRUE;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	8d 87       	std	Y+13, r24	; 0x0d
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <create_password+0x5a>
	}
	/*
	 * Send invalid passwords to the HMI ECU
	 * Return false to the main function
	 */
	UART_sendByte(UART_INVALID_PASSWORDS);
     f44:	80 ea       	ldi	r24, 0xA0	; 160
     f46:	0e 94 3e 10 	call	0x207c	; 0x207c <UART_sendByte>
	return FALSE;
     f4a:	1d 86       	std	Y+13, r1	; 0x0d
     f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
}
     f4e:	2d 96       	adiw	r28, 0x0d	; 13
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <validate_match_passwords>:
 * Outputs : bool
 * 			 TRUE if the passwords are matched
 * 		     else FALSE
 */
bool validate_match_passwords(uint8 * first_password, uint8 * second_password)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	27 97       	sbiw	r28, 0x07	; 7
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	8b 83       	std	Y+3, r24	; 0x03
     f78:	7e 83       	std	Y+6, r23	; 0x06
     f7a:	6d 83       	std	Y+5, r22	; 0x05
	/*
	 * loop on each character in the password and check if it is
	 * the same as the other password
	 */

		for (int i = 0; i < 5; i++)
     f7c:	1a 82       	std	Y+2, r1	; 0x02
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	19 c0       	rjmp	.+50     	; 0xfb4 <validate_match_passwords+0x54>
	{
		if (first_password[i] != second_password[i])
     f82:	29 81       	ldd	r18, Y+1	; 0x01
     f84:	3a 81       	ldd	r19, Y+2	; 0x02
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	fc 01       	movw	r30, r24
     f8c:	e2 0f       	add	r30, r18
     f8e:	f3 1f       	adc	r31, r19
     f90:	40 81       	ld	r20, Z
     f92:	29 81       	ldd	r18, Y+1	; 0x01
     f94:	3a 81       	ldd	r19, Y+2	; 0x02
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	80 81       	ld	r24, Z
     fa2:	48 17       	cp	r20, r24
     fa4:	11 f0       	breq	.+4      	; 0xfaa <validate_match_passwords+0x4a>
		{
			return FALSE;
     fa6:	1f 82       	std	Y+7, r1	; 0x07
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <validate_match_passwords+0x62>
	/*
	 * loop on each character in the password and check if it is
	 * the same as the other password
	 */

		for (int i = 0; i < 5; i++)
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	85 30       	cpi	r24, 0x05	; 5
     fba:	91 05       	cpc	r25, r1
     fbc:	14 f3       	brlt	.-60     	; 0xf82 <validate_match_passwords+0x22>
		if (first_password[i] != second_password[i])
		{
			return FALSE;
		}
	}
	return TRUE;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	8f 83       	std	Y+7, r24	; 0x07
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     fc4:	27 96       	adiw	r28, 0x07	; 7
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <trigger_alarm>:
 * Description : Function to trigger the alarm
 * Inputs  : None
 * Outputs : None
 */
void trigger_alarm(void)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	 * Start the buzzer
	 * Wait for 60 seconds
	 * Stop the timer
	 * Stop the buzzer
	 */
	g_timer_ticks = 0;
     fde:	10 92 74 01 	sts	0x0174, r1
	Timer1_init(&timer1_configurations);
     fe2:	88 e6       	ldi	r24, 0x68	; 104
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <Timer1_init>
	Timer1_setCallBack(timer_increase_ticks);
     fea:	8b e8       	ldi	r24, 0x8B	; 139
     fec:	99 e0       	ldi	r25, 0x09	; 9
     fee:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <Timer1_setCallBack>
	Buzzer_on();
     ff2:	0e 94 a8 09 	call	0x1350	; 0x1350 <Buzzer_on>
	while (g_timer_ticks < 60)
     ff6:	80 91 74 01 	lds	r24, 0x0174
     ffa:	8c 33       	cpi	r24, 0x3C	; 60
     ffc:	e0 f3       	brcs	.-8      	; 0xff6 <trigger_alarm+0x20>
	{
	}
	Buzzer_off();
     ffe:	0e 94 b4 09 	call	0x1368	; 0x1368 <Buzzer_off>
	g_timer_ticks = 0;
    1002:	10 92 74 01 	sts	0x0174, r1
	Timer1_deInit();
    1006:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Timer1_deInit>
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <store_password>:
 * Description : Function to store the password received from the HMI ECU in the EEPROM
 * Inputs  : uint8* password -> pointer to the password to be stored
 * Outputs : none
 */
void store_password(uint8 * password)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	62 97       	sbiw	r28, 0x12	; 18
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	9a 8b       	std	Y+18, r25	; 0x12
    1026:	89 8b       	std	Y+17, r24	; 0x11
	/*
	 * loop on each character in the password and store it in the EEPROM
	 */
	for (int i = 0; i < 5; i++)
    1028:	18 8a       	std	Y+16, r1	; 0x10
    102a:	1f 86       	std	Y+15, r1	; 0x0f
    102c:	88 c0       	rjmp	.+272    	; 0x113e <store_password+0x12e>
	{
		EEPROM_writeByte(EEPROM_PASSWORD_START_ADDRESS + i, password[i]);
    102e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1030:	98 89       	ldd	r25, Y+16	; 0x10
    1032:	8e 50       	subi	r24, 0x0E	; 14
    1034:	95 4f       	sbci	r25, 0xF5	; 245
    1036:	ac 01       	movw	r20, r24
    1038:	2f 85       	ldd	r18, Y+15	; 0x0f
    103a:	38 89       	ldd	r19, Y+16	; 0x10
    103c:	89 89       	ldd	r24, Y+17	; 0x11
    103e:	9a 89       	ldd	r25, Y+18	; 0x12
    1040:	fc 01       	movw	r30, r24
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	20 81       	ld	r18, Z
    1048:	ca 01       	movw	r24, r20
    104a:	62 2f       	mov	r22, r18
    104c:	0e 94 20 0a 	call	0x1440	; 0x1440 <EEPROM_writeByte>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e2       	ldi	r26, 0x20	; 32
    1056:	b1 e4       	ldi	r27, 0x41	; 65
    1058:	8b 87       	std	Y+11, r24	; 0x0b
    105a:	9c 87       	std	Y+12, r25	; 0x0c
    105c:	ad 87       	std	Y+13, r26	; 0x0d
    105e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1060:	6b 85       	ldd	r22, Y+11	; 0x0b
    1062:	7c 85       	ldd	r23, Y+12	; 0x0c
    1064:	8d 85       	ldd	r24, Y+13	; 0x0d
    1066:	9e 85       	ldd	r25, Y+14	; 0x0e
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	4a ef       	ldi	r20, 0xFA	; 250
    106e:	54 e4       	ldi	r21, 0x44	; 68
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8f 83       	std	Y+7, r24	; 0x07
    107a:	98 87       	std	Y+8, r25	; 0x08
    107c:	a9 87       	std	Y+9, r26	; 0x09
    107e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e8       	ldi	r20, 0x80	; 128
    108e:	5f e3       	ldi	r21, 0x3F	; 63
    1090:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1094:	88 23       	and	r24, r24
    1096:	2c f4       	brge	.+10     	; 0x10a2 <store_password+0x92>
		__ticks = 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	3f c0       	rjmp	.+126    	; 0x1120 <store_password+0x110>
	else if (__tmp > 65535)
    10a2:	6f 81       	ldd	r22, Y+7	; 0x07
    10a4:	78 85       	ldd	r23, Y+8	; 0x08
    10a6:	89 85       	ldd	r24, Y+9	; 0x09
    10a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
    10ae:	4f e7       	ldi	r20, 0x7F	; 127
    10b0:	57 e4       	ldi	r21, 0x47	; 71
    10b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10b6:	18 16       	cp	r1, r24
    10b8:	4c f5       	brge	.+82     	; 0x110c <store_password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    10bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10be:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	9e 83       	std	Y+6, r25	; 0x06
    10e0:	8d 83       	std	Y+5, r24	; 0x05
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <store_password+0xf2>
    10e4:	88 ec       	ldi	r24, 0xC8	; 200
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9c 83       	std	Y+4, r25	; 0x04
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <store_password+0xe0>
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	9e 83       	std	Y+6, r25	; 0x06
    1100:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	69 f7       	brne	.-38     	; 0x10e4 <store_password+0xd4>
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <store_password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110c:	6f 81       	ldd	r22, Y+7	; 0x07
    110e:	78 85       	ldd	r23, Y+8	; 0x08
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9e 83       	std	Y+6, r25	; 0x06
    111e:	8d 83       	std	Y+5, r24	; 0x05
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <store_password+0x11c>
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
void store_password(uint8 * password)
{
	/*
	 * loop on each character in the password and store it in the EEPROM
	 */
	for (int i = 0; i < 5; i++)
    1134:	8f 85       	ldd	r24, Y+15	; 0x0f
    1136:	98 89       	ldd	r25, Y+16	; 0x10
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	98 8b       	std	Y+16, r25	; 0x10
    113c:	8f 87       	std	Y+15, r24	; 0x0f
    113e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1140:	98 89       	ldd	r25, Y+16	; 0x10
    1142:	85 30       	cpi	r24, 0x05	; 5
    1144:	91 05       	cpc	r25, r1
    1146:	0c f4       	brge	.+2      	; 0x114a <store_password+0x13a>
    1148:	72 cf       	rjmp	.-284    	; 0x102e <store_password+0x1e>
	{
		EEPROM_writeByte(EEPROM_PASSWORD_START_ADDRESS + i, password[i]);
		_delay_ms(10);
	}
}
    114a:	62 96       	adiw	r28, 0x12	; 18
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <retrieve_password>:
 * Description : Function to retrieve the password stored in the EEPROM
 * Inputs  : uint8* password -> pointer to the password to store the retrieved password
 * Outputs : None
 */
void retrieve_password(uint8 * password)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	63 97       	sbiw	r28, 0x13	; 19
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	9b 8b       	std	Y+19, r25	; 0x13
    1172:	8a 8b       	std	Y+18, r24	; 0x12
	/*
	 * loop on each character in the password and retrieve it from the EEPROM
	 */
	uint8 data;
	for (int i = 0; i < 5; i++)
    1174:	18 8a       	std	Y+16, r1	; 0x10
    1176:	1f 86       	std	Y+15, r1	; 0x0f
    1178:	8a c0       	rjmp	.+276    	; 0x128e <retrieve_password+0x132>
	{
		EEPROM_readByte(EEPROM_PASSWORD_START_ADDRESS + i, &data);
    117a:	8f 85       	ldd	r24, Y+15	; 0x0f
    117c:	98 89       	ldd	r25, Y+16	; 0x10
    117e:	8e 50       	subi	r24, 0x0E	; 14
    1180:	95 4f       	sbci	r25, 0xF5	; 245
    1182:	9e 01       	movw	r18, r28
    1184:	2f 5e       	subi	r18, 0xEF	; 239
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	b9 01       	movw	r22, r18
    118a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <EEPROM_readByte>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a0 e2       	ldi	r26, 0x20	; 32
    1194:	b1 e4       	ldi	r27, 0x41	; 65
    1196:	8b 87       	std	Y+11, r24	; 0x0b
    1198:	9c 87       	std	Y+12, r25	; 0x0c
    119a:	ad 87       	std	Y+13, r26	; 0x0d
    119c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119e:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	4a ef       	ldi	r20, 0xFA	; 250
    11ac:	54 e4       	ldi	r21, 0x44	; 68
    11ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	8f 83       	std	Y+7, r24	; 0x07
    11b8:	98 87       	std	Y+8, r25	; 0x08
    11ba:	a9 87       	std	Y+9, r26	; 0x09
    11bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11be:	6f 81       	ldd	r22, Y+7	; 0x07
    11c0:	78 85       	ldd	r23, Y+8	; 0x08
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <retrieve_password+0x84>
		__ticks = 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
    11de:	3f c0       	rjmp	.+126    	; 0x125e <retrieve_password+0x102>
	else if (__tmp > 65535)
    11e0:	6f 81       	ldd	r22, Y+7	; 0x07
    11e2:	78 85       	ldd	r23, Y+8	; 0x08
    11e4:	89 85       	ldd	r24, Y+9	; 0x09
    11e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	4f e7       	ldi	r20, 0x7F	; 127
    11ee:	57 e4       	ldi	r21, 0x47	; 71
    11f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11f4:	18 16       	cp	r1, r24
    11f6:	4c f5       	brge	.+82     	; 0x124a <retrieve_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e2       	ldi	r20, 0x20	; 32
    1206:	51 e4       	ldi	r21, 0x41	; 65
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	0f c0       	rjmp	.+30     	; 0x1240 <retrieve_password+0xe4>
    1222:	88 ec       	ldi	r24, 0xC8	; 200
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9c 83       	std	Y+4, r25	; 0x04
    1228:	8b 83       	std	Y+3, r24	; 0x03
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <retrieve_password+0xd2>
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	69 f7       	brne	.-38     	; 0x1222 <retrieve_password+0xc6>
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <retrieve_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <retrieve_password+0x10e>
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		password[i] = data;
    1272:	2f 85       	ldd	r18, Y+15	; 0x0f
    1274:	38 89       	ldd	r19, Y+16	; 0x10
    1276:	8a 89       	ldd	r24, Y+18	; 0x12
    1278:	9b 89       	ldd	r25, Y+19	; 0x13
    127a:	fc 01       	movw	r30, r24
    127c:	e2 0f       	add	r30, r18
    127e:	f3 1f       	adc	r31, r19
    1280:	89 89       	ldd	r24, Y+17	; 0x11
    1282:	80 83       	st	Z, r24
{
	/*
	 * loop on each character in the password and retrieve it from the EEPROM
	 */
	uint8 data;
	for (int i = 0; i < 5; i++)
    1284:	8f 85       	ldd	r24, Y+15	; 0x0f
    1286:	98 89       	ldd	r25, Y+16	; 0x10
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	98 8b       	std	Y+16, r25	; 0x10
    128c:	8f 87       	std	Y+15, r24	; 0x0f
    128e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1290:	98 89       	ldd	r25, Y+16	; 0x10
    1292:	85 30       	cpi	r24, 0x05	; 5
    1294:	91 05       	cpc	r25, r1
    1296:	0c f4       	brge	.+2      	; 0x129a <retrieve_password+0x13e>
    1298:	70 cf       	rjmp	.-288    	; 0x117a <retrieve_password+0x1e>
	{
		EEPROM_readByte(EEPROM_PASSWORD_START_ADDRESS + i, &data);
		_delay_ms(10);
		password[i] = data;
	}
}
    129a:	63 96       	adiw	r28, 0x13	; 19
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <open_door>:
 * Description : open the door
 * Inputs  : void
 * Outputs : void
 */
void open_door(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	 * Rotate the motor 15 seconds anti clockwise
	 * stop the motor
	 * stop the timer
	 * reset the timer ticks
	 */
	g_timer_ticks = 0;
    12b4:	10 92 74 01 	sts	0x0174, r1
	Timer1_init(&timer1_configurations);
    12b8:	88 e6       	ldi	r24, 0x68	; 104
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <Timer1_init>
	Timer1_setCallBack(timer_increase_ticks);
    12c0:	8b e8       	ldi	r24, 0x8B	; 139
    12c2:	99 e0       	ldi	r25, 0x09	; 9
    12c4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <Timer1_setCallBack>
	DcMotor_Rotate(DC_MOTOR_CLOCKWISE, 100);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	64 e6       	ldi	r22, 0x64	; 100
    12cc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
	while (g_timer_ticks < 15)
    12d0:	80 91 74 01 	lds	r24, 0x0174
    12d4:	8f 30       	cpi	r24, 0x0F	; 15
    12d6:	e0 f3       	brcs	.-8      	; 0x12d0 <open_door+0x24>
	{
	}
	g_timer_ticks = 0;
    12d8:	10 92 74 01 	sts	0x0174, r1
	DcMotor_Rotate(DC_MOTOR_STOP, 0);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
	while (g_timer_ticks < 3)
    12e4:	80 91 74 01 	lds	r24, 0x0174
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	e0 f3       	brcs	.-8      	; 0x12e4 <open_door+0x38>
	{
	}
	g_timer_ticks = 0;
    12ec:	10 92 74 01 	sts	0x0174, r1
	DcMotor_Rotate(DC_MOTOR_ANTI_CLOCKWISE, 100);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	64 e6       	ldi	r22, 0x64	; 100
    12f4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
	while (g_timer_ticks < 15)
    12f8:	80 91 74 01 	lds	r24, 0x0174
    12fc:	8f 30       	cpi	r24, 0x0F	; 15
    12fe:	e0 f3       	brcs	.-8      	; 0x12f8 <open_door+0x4c>
	{
	}
	DcMotor_Rotate(DC_MOTOR_STOP, 0);
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
	g_timer_ticks = 0;
    1308:	10 92 74 01 	sts	0x0174, r1
	Timer1_deInit();
    130c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Timer1_deInit>
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <timer_increase_ticks>:
 * Description : Call back Function to increase the timer ticks
 * Inputs  : void
 * Outputs : void
 */
void timer_increase_ticks(void)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	g_timer_ticks++;
    131e:	80 91 74 01 	lds	r24, 0x0174
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	80 93 74 01 	sts	0x0174, r24
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <Buzzer_init>:
/*
 * Description :
 *  Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * Turn off the buzzer through the GPIO.
*/
void Buzzer_init(void){
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	/* Set Buzzer pin to output pin*/
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <GPIO_setupPinDirection>
	/* Set the buzzer to be off in the beginning */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <Buzzer_on>:

/*
 * Description :
 *  Function to enable the Buzzer through the GPIO.
*/
void Buzzer_on(void){
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
	/* Set the buzzer pin to logic high */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
}
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <Buzzer_off>:

/*
 * Description :
 *  Function to disable the Buzzer through the GPIO.
*/
void Buzzer_off(void){
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	/* Set the buzzer pin to logic low */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>

}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <DcMotor_Init>:


/*
 * Description : function to initialize the DC motor driver
 */
void DcMotor_Init(void){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62

	 /* setup motor pins as output pins */
	 GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN, PIN_OUTPUT);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <GPIO_setupPinDirection>
	 GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN, PIN_OUTPUT);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 c1 0a 	call	0x1582	; 0x1582 <GPIO_setupPinDirection>

	 /* set the pins to zero initially to stop the motor at the beginning */
	 GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN, LOGIC_LOW);
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
	 GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN, LOGIC_LOW);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>

 }
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <DcMotor_Rotate>:


/*
 * Description : function to control the state of the dc motor
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DcMotor_Rotate+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <DcMotor_Rotate+0x8>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3c 83       	std	Y+4, r19	; 0x04
    13ce:	2b 83       	std	Y+3, r18	; 0x03
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	91 05       	cpc	r25, r1
    13d8:	f9 f0       	breq	.+62     	; 0x1418 <DcMotor_Rotate+0x62>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	3c 81       	ldd	r19, Y+4	; 0x04
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	79 f0       	breq	.+30     	; 0x1402 <DcMotor_Rotate+0x4c>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	01 f5       	brne	.+64     	; 0x142c <DcMotor_Rotate+0x76>

	case(DC_MOTOR_STOP):
		/* write the two motor pins to zero to stop the motor */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN, LOGIC_LOW);
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN, LOGIC_LOW);
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
    1400:	15 c0       	rjmp	.+42     	; 0x142c <DcMotor_Rotate+0x76>
		break;

	case(DC_MOTOR_CLOCKWISE):
		/* rotate clockwise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN, LOGIC_LOW);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN, LOGIC_HIGH);
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
    1416:	0a c0       	rjmp	.+20     	; 0x142c <DcMotor_Rotate+0x76>
		break;

	case(DC_MOTOR_ANTI_CLOCKWISE):
		/* rotate anti clockwise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN, LOGIC_HIGH);
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN, LOGIC_LOW);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	0e 94 ac 0b 	call	0x1758	; 0x1758 <GPIO_writePin>
	}

	PWM_Timer0_Init(speed);
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <PWM_Timer0_Init>
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <EEPROM_writeByte+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <EEPROM_writeByte+0x8>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1452:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1456:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    145a:	88 30       	cpi	r24, 0x08	; 8
    145c:	11 f0       	breq	.+4      	; 0x1462 <EEPROM_writeByte+0x22>
        return ERROR;
    145e:	1c 82       	std	Y+4, r1	; 0x04
    1460:	28 c0       	rjmp	.+80     	; 0x14b2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	80 70       	andi	r24, 0x00	; 0
    1468:	97 70       	andi	r25, 0x07	; 7
    146a:	88 0f       	add	r24, r24
    146c:	89 2f       	mov	r24, r25
    146e:	88 1f       	adc	r24, r24
    1470:	99 0b       	sbc	r25, r25
    1472:	91 95       	neg	r25
    1474:	80 6a       	ori	r24, 0xA0	; 160
    1476:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    147a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    147e:	88 31       	cpi	r24, 0x18	; 24
    1480:	11 f0       	breq	.+4      	; 0x1486 <EEPROM_writeByte+0x46>
        return ERROR; 
    1482:	1c 82       	std	Y+4, r1	; 0x04
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    148c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    1490:	88 32       	cpi	r24, 0x28	; 40
    1492:	11 f0       	breq	.+4      	; 0x1498 <EEPROM_writeByte+0x58>
        return ERROR;
    1494:	1c 82       	std	Y+4, r1	; 0x04
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    149e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    14a2:	88 32       	cpi	r24, 0x28	; 40
    14a4:	11 f0       	breq	.+4      	; 0x14aa <EEPROM_writeByte+0x6a>
        return ERROR;
    14a6:	1c 82       	std	Y+4, r1	; 0x04
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14aa:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <TWI_stop>
	
    return SUCCESS;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	8c 83       	std	Y+4, r24	; 0x04
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <EEPROM_readByte+0x6>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <EEPROM_readByte+0x8>
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	7c 83       	std	Y+4, r23	; 0x04
    14d6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14d8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14dc:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    14e0:	88 30       	cpi	r24, 0x08	; 8
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <EEPROM_readByte+0x26>
        return ERROR;
    14e4:	1d 82       	std	Y+5, r1	; 0x05
    14e6:	44 c0       	rjmp	.+136    	; 0x1570 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	80 70       	andi	r24, 0x00	; 0
    14ee:	97 70       	andi	r25, 0x07	; 7
    14f0:	88 0f       	add	r24, r24
    14f2:	89 2f       	mov	r24, r25
    14f4:	88 1f       	adc	r24, r24
    14f6:	99 0b       	sbc	r25, r25
    14f8:	91 95       	neg	r25
    14fa:	80 6a       	ori	r24, 0xA0	; 160
    14fc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1500:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    1504:	88 31       	cpi	r24, 0x18	; 24
    1506:	11 f0       	breq	.+4      	; 0x150c <EEPROM_readByte+0x4a>
        return ERROR;
    1508:	1d 82       	std	Y+5, r1	; 0x05
    150a:	32 c0       	rjmp	.+100    	; 0x1570 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1512:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    1516:	88 32       	cpi	r24, 0x28	; 40
    1518:	11 f0       	breq	.+4      	; 0x151e <EEPROM_readByte+0x5c>
        return ERROR;
    151a:	1d 82       	std	Y+5, r1	; 0x05
    151c:	29 c0       	rjmp	.+82     	; 0x1570 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    151e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1522:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    1526:	80 31       	cpi	r24, 0x10	; 16
    1528:	11 f0       	breq	.+4      	; 0x152e <EEPROM_readByte+0x6c>
        return ERROR;
    152a:	1d 82       	std	Y+5, r1	; 0x05
    152c:	21 c0       	rjmp	.+66     	; 0x1570 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	80 70       	andi	r24, 0x00	; 0
    1534:	97 70       	andi	r25, 0x07	; 7
    1536:	88 0f       	add	r24, r24
    1538:	89 2f       	mov	r24, r25
    153a:	88 1f       	adc	r24, r24
    153c:	99 0b       	sbc	r25, r25
    153e:	91 95       	neg	r25
    1540:	81 6a       	ori	r24, 0xA1	; 161
    1542:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1546:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    154a:	80 34       	cpi	r24, 0x40	; 64
    154c:	11 f0       	breq	.+4      	; 0x1552 <EEPROM_readByte+0x90>
        return ERROR;
    154e:	1d 82       	std	Y+5, r1	; 0x05
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1552:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <TWI_readByteWithNACK>
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    155c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <TWI_getStatus>
    1560:	88 35       	cpi	r24, 0x58	; 88
    1562:	11 f0       	breq	.+4      	; 0x1568 <EEPROM_readByte+0xa6>
        return ERROR;
    1564:	1d 82       	std	Y+5, r1	; 0x05
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1568:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <TWI_stop>

    return SUCCESS;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <GPIO_setupPinDirection+0x6>
    1588:	00 d0       	rcall	.+0      	; 0x158a <GPIO_setupPinDirection+0x8>
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	6a 83       	std	Y+2, r22	; 0x02
    1594:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	08 f0       	brcs	.+2      	; 0x159e <GPIO_setupPinDirection+0x1c>
    159c:	d5 c0       	rjmp	.+426    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <GPIO_setupPinDirection+0x24>
    15a4:	d1 c0       	rjmp	.+418    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3d 83       	std	Y+5, r19	; 0x05
    15ae:	2c 83       	std	Y+4, r18	; 0x04
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <GPIO_setupPinDirection+0x3a>
    15ba:	43 c0       	rjmp	.+134    	; 0x1642 <GPIO_setupPinDirection+0xc0>
    15bc:	2c 81       	ldd	r18, Y+4	; 0x04
    15be:	3d 81       	ldd	r19, Y+5	; 0x05
    15c0:	22 30       	cpi	r18, 0x02	; 2
    15c2:	31 05       	cpc	r19, r1
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <GPIO_setupPinDirection+0x4e>
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	71 f0       	breq	.+28     	; 0x15ea <GPIO_setupPinDirection+0x68>
    15ce:	bc c0       	rjmp	.+376    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	09 f4       	brne	.+2      	; 0x15dc <GPIO_setupPinDirection+0x5a>
    15da:	5f c0       	rjmp	.+190    	; 0x169a <GPIO_setupPinDirection+0x118>
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <GPIO_setupPinDirection+0x66>
    15e6:	85 c0       	rjmp	.+266    	; 0x16f2 <GPIO_setupPinDirection+0x170>
    15e8:	af c0       	rjmp	.+350    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15f0:	aa e3       	ldi	r26, 0x3A	; 58
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ea e3       	ldi	r30, 0x3A	; 58
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_setupPinDirection+0x8c>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_setupPinDirection+0x88>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	98 c0       	rjmp	.+304    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1618:	aa e3       	ldi	r26, 0x3A	; 58
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ea e3       	ldi	r30, 0x3A	; 58
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_setupPinDirection+0xb4>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_setupPinDirection+0xb0>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	83 c0       	rjmp	.+262    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	a1 f4       	brne	.+40     	; 0x1670 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1648:	a7 e3       	ldi	r26, 0x37	; 55
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e7 e3       	ldi	r30, 0x37	; 55
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <GPIO_setupPinDirection+0xe4>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <GPIO_setupPinDirection+0xe0>
    166a:	84 2b       	or	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	6c c0       	rjmp	.+216    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1670:	a7 e3       	ldi	r26, 0x37	; 55
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e7 e3       	ldi	r30, 0x37	; 55
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <GPIO_setupPinDirection+0x10c>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <GPIO_setupPinDirection+0x108>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	57 c0       	rjmp	.+174    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	a1 f4       	brne	.+40     	; 0x16c8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16a0:	a4 e3       	ldi	r26, 0x34	; 52
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e4 e3       	ldi	r30, 0x34	; 52
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_setupPinDirection+0x13c>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_setupPinDirection+0x138>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	40 c0       	rjmp	.+128    	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16c8:	a4 e3       	ldi	r26, 0x34	; 52
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e4 e3       	ldi	r30, 0x34	; 52
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <GPIO_setupPinDirection+0x164>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <GPIO_setupPinDirection+0x160>
    16ea:	80 95       	com	r24
    16ec:	84 23       	and	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	2b c0       	rjmp	.+86     	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	a1 f4       	brne	.+40     	; 0x1720 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16f8:	a1 e3       	ldi	r26, 0x31	; 49
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e1 e3       	ldi	r30, 0x31	; 49
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_setupPinDirection+0x194>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_setupPinDirection+0x190>
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	14 c0       	rjmp	.+40     	; 0x1748 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1720:	a1 e3       	ldi	r26, 0x31	; 49
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e1 e3       	ldi	r30, 0x31	; 49
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_setupPinDirection+0x1bc>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_setupPinDirection+0x1b8>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <GPIO_writePin+0x6>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <GPIO_writePin+0x8>
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	6a 83       	std	Y+2, r22	; 0x02
    176a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	88 30       	cpi	r24, 0x08	; 8
    1770:	08 f0       	brcs	.+2      	; 0x1774 <GPIO_writePin+0x1c>
    1772:	d5 c0       	rjmp	.+426    	; 0x191e <GPIO_writePin+0x1c6>
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	08 f0       	brcs	.+2      	; 0x177c <GPIO_writePin+0x24>
    177a:	d1 c0       	rjmp	.+418    	; 0x191e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	3d 83       	std	Y+5, r19	; 0x05
    1784:	2c 83       	std	Y+4, r18	; 0x04
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <GPIO_writePin+0x3a>
    1790:	43 c0       	rjmp	.+134    	; 0x1818 <GPIO_writePin+0xc0>
    1792:	2c 81       	ldd	r18, Y+4	; 0x04
    1794:	3d 81       	ldd	r19, Y+5	; 0x05
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	2c f4       	brge	.+10     	; 0x17a6 <GPIO_writePin+0x4e>
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	71 f0       	breq	.+28     	; 0x17c0 <GPIO_writePin+0x68>
    17a4:	bc c0       	rjmp	.+376    	; 0x191e <GPIO_writePin+0x1c6>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <GPIO_writePin+0x5a>
    17b0:	5f c0       	rjmp	.+190    	; 0x1870 <GPIO_writePin+0x118>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <GPIO_writePin+0x66>
    17bc:	85 c0       	rjmp	.+266    	; 0x18c8 <GPIO_writePin+0x170>
    17be:	af c0       	rjmp	.+350    	; 0x191e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	a1 f4       	brne	.+40     	; 0x17ee <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17c6:	ab e3       	ldi	r26, 0x3B	; 59
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	eb e3       	ldi	r30, 0x3B	; 59
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_writePin+0x8c>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_writePin+0x88>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	98 c0       	rjmp	.+304    	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17ee:	ab e3       	ldi	r26, 0x3B	; 59
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e3       	ldi	r30, 0x3B	; 59
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_writePin+0xb4>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_writePin+0xb0>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	83 c0       	rjmp	.+262    	; 0x191e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	a1 f4       	brne	.+40     	; 0x1846 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    181e:	a8 e3       	ldi	r26, 0x38	; 56
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e8 e3       	ldi	r30, 0x38	; 56
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_writePin+0xe4>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_writePin+0xe0>
    1840:	84 2b       	or	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	6c c0       	rjmp	.+216    	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1846:	a8 e3       	ldi	r26, 0x38	; 56
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <GPIO_writePin+0x10c>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <GPIO_writePin+0x108>
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	57 c0       	rjmp	.+174    	; 0x191e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	a1 f4       	brne	.+40     	; 0x189e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1876:	a5 e3       	ldi	r26, 0x35	; 53
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e3       	ldi	r30, 0x35	; 53
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <GPIO_writePin+0x13c>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <GPIO_writePin+0x138>
    1898:	84 2b       	or	r24, r20
    189a:	8c 93       	st	X, r24
    189c:	40 c0       	rjmp	.+128    	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    189e:	a5 e3       	ldi	r26, 0x35	; 53
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <GPIO_writePin+0x164>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <GPIO_writePin+0x160>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	2b c0       	rjmp	.+86     	; 0x191e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	a1 f4       	brne	.+40     	; 0x18f6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18ce:	a2 e3       	ldi	r26, 0x32	; 50
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e2 e3       	ldi	r30, 0x32	; 50
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_writePin+0x194>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_writePin+0x190>
    18f0:	84 2b       	or	r24, r20
    18f2:	8c 93       	st	X, r24
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18f6:	a2 e3       	ldi	r26, 0x32	; 50
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_writePin+0x1bc>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_writePin+0x1b8>
    1918:	80 95       	com	r24
    191a:	84 23       	and	r24, r20
    191c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <GPIO_readPin+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_readPin+0x8>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8a 83       	std	Y+2, r24	; 0x02
    193e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1940:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	88 30       	cpi	r24, 0x08	; 8
    1946:	08 f0       	brcs	.+2      	; 0x194a <GPIO_readPin+0x1c>
    1948:	84 c0       	rjmp	.+264    	; 0x1a52 <GPIO_readPin+0x124>
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	08 f0       	brcs	.+2      	; 0x1952 <GPIO_readPin+0x24>
    1950:	80 c0       	rjmp	.+256    	; 0x1a52 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3d 83       	std	Y+5, r19	; 0x05
    195a:	2c 83       	std	Y+4, r18	; 0x04
    195c:	4c 81       	ldd	r20, Y+4	; 0x04
    195e:	5d 81       	ldd	r21, Y+5	; 0x05
    1960:	41 30       	cpi	r20, 0x01	; 1
    1962:	51 05       	cpc	r21, r1
    1964:	79 f1       	breq	.+94     	; 0x19c4 <GPIO_readPin+0x96>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	91 05       	cpc	r25, r1
    196e:	34 f4       	brge	.+12     	; 0x197c <GPIO_readPin+0x4e>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	21 15       	cp	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	69 f0       	breq	.+26     	; 0x1994 <GPIO_readPin+0x66>
    197a:	6b c0       	rjmp	.+214    	; 0x1a52 <GPIO_readPin+0x124>
    197c:	4c 81       	ldd	r20, Y+4	; 0x04
    197e:	5d 81       	ldd	r21, Y+5	; 0x05
    1980:	42 30       	cpi	r20, 0x02	; 2
    1982:	51 05       	cpc	r21, r1
    1984:	b9 f1       	breq	.+110    	; 0x19f4 <GPIO_readPin+0xc6>
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <GPIO_readPin+0x64>
    1990:	49 c0       	rjmp	.+146    	; 0x1a24 <GPIO_readPin+0xf6>
    1992:	5f c0       	rjmp	.+190    	; 0x1a52 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1994:	e9 e3       	ldi	r30, 0x39	; 57
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <GPIO_readPin+0x7e>
    19a8:	55 95       	asr	r21
    19aa:	47 95       	ror	r20
    19ac:	8a 95       	dec	r24
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <GPIO_readPin+0x7a>
    19b0:	ca 01       	movw	r24, r20
    19b2:	81 70       	andi	r24, 0x01	; 1
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	88 23       	and	r24, r24
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	49 c0       	rjmp	.+146    	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19c0:	19 82       	std	Y+1, r1	; 0x01
    19c2:	47 c0       	rjmp	.+142    	; 0x1a52 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19c4:	e6 e3       	ldi	r30, 0x36	; 54
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a9 01       	movw	r20, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <GPIO_readPin+0xae>
    19d8:	55 95       	asr	r21
    19da:	47 95       	ror	r20
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <GPIO_readPin+0xaa>
    19e0:	ca 01       	movw	r24, r20
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	88 23       	and	r24, r24
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	31 c0       	rjmp	.+98     	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19f0:	19 82       	std	Y+1, r1	; 0x01
    19f2:	2f c0       	rjmp	.+94     	; 0x1a52 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19f4:	e3 e3       	ldi	r30, 0x33	; 51
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a9 01       	movw	r20, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <GPIO_readPin+0xde>
    1a08:	55 95       	asr	r21
    1a0a:	47 95       	ror	r20
    1a0c:	8a 95       	dec	r24
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <GPIO_readPin+0xda>
    1a10:	ca 01       	movw	r24, r20
    1a12:	81 70       	andi	r24, 0x01	; 1
    1a14:	90 70       	andi	r25, 0x00	; 0
    1a16:	88 23       	and	r24, r24
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	19 c0       	rjmp	.+50     	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	17 c0       	rjmp	.+46     	; 0x1a52 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a24:	e0 e3       	ldi	r30, 0x30	; 48
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a9 01       	movw	r20, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <GPIO_readPin+0x10e>
    1a38:	55 95       	asr	r21
    1a3a:	47 95       	ror	r20
    1a3c:	8a 95       	dec	r24
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <GPIO_readPin+0x10a>
    1a40:	ca 01       	movw	r24, r20
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	88 23       	and	r24, r24
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a50:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <GPIO_setupPortDirection+0x6>
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <GPIO_setupPortDirection+0x8>
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	90 f5       	brcc	.+100    	; 0x1ade <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3c 83       	std	Y+4, r19	; 0x04
    1a82:	2b 83       	std	Y+3, r18	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	d1 f0       	breq	.+52     	; 0x1ac2 <GPIO_setupPortDirection+0x5e>
    1a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a90:	3c 81       	ldd	r19, Y+4	; 0x04
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <GPIO_setupPortDirection+0x3e>
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	61 f0       	breq	.+24     	; 0x1ab8 <GPIO_setupPortDirection+0x54>
    1aa0:	1e c0       	rjmp	.+60     	; 0x1ade <GPIO_setupPortDirection+0x7a>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	81 f0       	breq	.+32     	; 0x1acc <GPIO_setupPortDirection+0x68>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	83 30       	cpi	r24, 0x03	; 3
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <GPIO_setupPortDirection+0x72>
    1ab6:	13 c0       	rjmp	.+38     	; 0x1ade <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ab8:	ea e3       	ldi	r30, 0x3A	; 58
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	80 83       	st	Z, r24
    1ac0:	0e c0       	rjmp	.+28     	; 0x1ade <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ac2:	e7 e3       	ldi	r30, 0x37	; 55
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 83       	st	Z, r24
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1acc:	e4 e3       	ldi	r30, 0x34	; 52
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ad6:	e1 e3       	ldi	r30, 0x31	; 49
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <GPIO_writePort+0x6>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <GPIO_writePort+0x8>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	90 f5       	brcc	.+100    	; 0x1b66 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3c 83       	std	Y+4, r19	; 0x04
    1b0a:	2b 83       	std	Y+3, r18	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	d1 f0       	breq	.+52     	; 0x1b4a <GPIO_writePort+0x5e>
    1b16:	2b 81       	ldd	r18, Y+3	; 0x03
    1b18:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <GPIO_writePort+0x3e>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <GPIO_writePort+0x54>
    1b28:	1e c0       	rjmp	.+60     	; 0x1b66 <GPIO_writePort+0x7a>
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	81 f0       	breq	.+32     	; 0x1b54 <GPIO_writePort+0x68>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	83 30       	cpi	r24, 0x03	; 3
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	81 f0       	breq	.+32     	; 0x1b5e <GPIO_writePort+0x72>
    1b3e:	13 c0       	rjmp	.+38     	; 0x1b66 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b40:	eb e3       	ldi	r30, 0x3B	; 59
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b5e:	e2 e3       	ldi	r30, 0x32	; 50
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <GPIO_readPort+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <GPIO_readPort+0x8>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b82:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	90 f5       	brcc	.+100    	; 0x1bee <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	3c 83       	std	Y+4, r19	; 0x04
    1b92:	2b 83       	std	Y+3, r18	; 0x03
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	d1 f0       	breq	.+52     	; 0x1bd2 <GPIO_readPort+0x5e>
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <GPIO_readPort+0x3e>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	61 f0       	breq	.+24     	; 0x1bc8 <GPIO_readPort+0x54>
    1bb0:	1e c0       	rjmp	.+60     	; 0x1bee <GPIO_readPort+0x7a>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	22 30       	cpi	r18, 0x02	; 2
    1bb8:	31 05       	cpc	r19, r1
    1bba:	81 f0       	breq	.+32     	; 0x1bdc <GPIO_readPort+0x68>
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	81 f0       	breq	.+32     	; 0x1be6 <GPIO_readPort+0x72>
    1bc6:	13 c0       	rjmp	.+38     	; 0x1bee <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bc8:	e9 e3       	ldi	r30, 0x39	; 57
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	0e c0       	rjmp	.+28     	; 0x1bee <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bd2:	e6 e3       	ldi	r30, 0x36	; 54
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bdc:	e3 e3       	ldi	r30, 0x33	; 51
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1be6:	e0 e3       	ldi	r30, 0x30	; 48
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <PWM_Timer0_Init>:


/*
 * Description : function to initialize timer0 with PWM mode
 */
void PWM_Timer0_Init(unsigned char set_duty_cycle){
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	0f 92       	push	r0
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1c0e:	e2 e5       	ldi	r30, 0x52	; 82
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	10 82       	st	Z, r1



	//OCR0  = (set_duty_cycle * 255 / 100); // Set Compare Value

	OCR0  = (uint8)(((float32)set_duty_cycle/100 * 255 + 0.5));
    1c14:	0c e5       	ldi	r16, 0x5C	; 92
    1c16:	10 e0       	ldi	r17, 0x00	; 0
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e0       	ldi	r26, 0x00	; 0
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	48 ec       	ldi	r20, 0xC8	; 200
    1c38:	52 e4       	ldi	r21, 0x42	; 66
    1c3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	53 e4       	ldi	r21, 0x43	; 67
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	f8 01       	movw	r30, r16
    1c78:	80 83       	st	Z, r24


	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1c7a:	a7 e3       	ldi	r26, 0x37	; 55
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e7 e3       	ldi	r30, 0x37	; 55
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	88 60       	ori	r24, 0x08	; 8
    1c86:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1c88:	e3 e5       	ldi	r30, 0x53	; 83
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8a e6       	ldi	r24, 0x6A	; 106
    1c8e:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	63 e0       	ldi	r22, 0x03	; 3
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 c1 0a 	call	0x1582	; 0x1582 <GPIO_setupPinDirection>
}
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	08 95       	ret

00001ca6 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1cd0:	80 91 75 01 	lds	r24, 0x0175
    1cd4:	90 91 76 01 	lds	r25, 0x0176
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1cdc:	e0 91 75 01 	lds	r30, 0x0175
    1ce0:	f0 91 76 01 	lds	r31, 0x0176
    1ce4:	09 95       	icall
	}
}
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	bf 91       	pop	r27
    1cf0:	af 91       	pop	r26
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	7f 91       	pop	r23
    1cf8:	6f 91       	pop	r22
    1cfa:	5f 91       	pop	r21
    1cfc:	4f 91       	pop	r20
    1cfe:	3f 91       	pop	r19
    1d00:	2f 91       	pop	r18
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d36:	80 91 75 01 	lds	r24, 0x0175
    1d3a:	90 91 76 01 	lds	r25, 0x0176
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d42:	e0 91 75 01 	lds	r30, 0x0175
    1d46:	f0 91 76 01 	lds	r31, 0x0176
    1d4a:	09 95       	icall
	}
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <Timer1_setCallBack>:

/*
 * Description: Function to set the call back function for timer one to be executed by the ISR
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <Timer1_setCallBack+0x6>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	90 93 76 01 	sts	0x0176, r25
    1d88:	80 93 75 01 	sts	0x0175, r24
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <Timer1_init>:

/*
 * Description: Function to initialize timer1 with CTC or normal mode
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <Timer1_init+0x6>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
	/* Set the initial value in TCNT1 */
	TCNT1 = Config_Ptr->initial_value;
    1da4:	ac e4       	ldi	r26, 0x4C	; 76
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e9 81       	ldd	r30, Y+1	; 0x01
    1daa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	9c 93       	st	X, r25
    1db4:	8e 93       	st	-X, r24

	if(Config_Ptr->mode == TIMER1_COMP_MODE){
    1db6:	e9 81       	ldd	r30, Y+1	; 0x01
    1db8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dba:	85 81       	ldd	r24, Z+5	; 0x05
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	c1 f4       	brne	.+48     	; 0x1df0 <Timer1_init+0x5a>
		/*Set compare value in OCR1A reg*/
		OCR1A  = Config_Ptr->compare_value;
    1dc0:	aa e4       	ldi	r26, 0x4A	; 74
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	11 96       	adiw	r26, 0x01	; 1
    1dce:	9c 93       	st	X, r25
    1dd0:	8e 93       	st	-X, r24
		/* enable compare mode interrupt */
		TIMSK |= (1<<OCIE1A);
    1dd2:	a9 e5       	ldi	r26, 0x59	; 89
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e9 e5       	ldi	r30, 0x59	; 89
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 61       	ori	r24, 0x10	; 16
    1dde:	8c 93       	st	X, r24
		/*WGM12 bit must be set in TCCR1B in CTC mode*/
		TCCR1B |= (1<<WGM12);
    1de0:	ae e4       	ldi	r26, 0x4E	; 78
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	ee e4       	ldi	r30, 0x4E	; 78
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	88 60       	ori	r24, 0x08	; 8
    1dec:	8c 93       	st	X, r24
    1dee:	0c c0       	rjmp	.+24     	; 0x1e08 <Timer1_init+0x72>
	}
	else if (Config_Ptr->mode == TIMER1_NORMAL_MODE){
    1df0:	e9 81       	ldd	r30, Y+1	; 0x01
    1df2:	fa 81       	ldd	r31, Y+2	; 0x02
    1df4:	85 81       	ldd	r24, Z+5	; 0x05
    1df6:	88 23       	and	r24, r24
    1df8:	39 f4       	brne	.+14     	; 0x1e08 <Timer1_init+0x72>
		/* Enable Timer1 Overflow Interrupt */
		TIMSK |= (1<<TOIE0);
    1dfa:	a9 e5       	ldi	r26, 0x59	; 89
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e9 e5       	ldi	r30, 0x59	; 89
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	81 60       	ori	r24, 0x01	; 1
    1e06:	8c 93       	st	X, r24
	}
	/* set prescaler in TCCR1B Register */
	TCCR1B |= (Config_Ptr->prescaler);
    1e08:	ae e4       	ldi	r26, 0x4E	; 78
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ee e4       	ldi	r30, 0x4E	; 78
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	90 81       	ld	r25, Z
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	84 81       	ldd	r24, Z+4	; 0x04
    1e18:	89 2b       	or	r24, r25
    1e1a:	8c 93       	st	X, r24
	/* bits FOC1A and FOC1B must be set to specify a non-PWM mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1e1c:	ef e4       	ldi	r30, 0x4F	; 79
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	8c e0       	ldi	r24, 0x0C	; 12
    1e22:	80 83       	st	Z, r24
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <Timer1_deInit>:

/*
 * Description: Function to de-initialize timer1
 */
void Timer1_deInit(void){
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1e36:	ec e4       	ldi	r30, 0x4C	; 76
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	11 82       	std	Z+1, r1	; 0x01
    1e3c:	10 82       	st	Z, r1
	OCR1A = 0;
    1e3e:	ea e4       	ldi	r30, 0x4A	; 74
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	11 82       	std	Z+1, r1	; 0x01
    1e44:	10 82       	st	Z, r1
	TCCR1A = 0;
    1e46:	ef e4       	ldi	r30, 0x4F	; 79
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	10 82       	st	Z, r1
	TCCR1B = 0;
    1e4c:	ee e4       	ldi	r30, 0x4E	; 78
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE0);
    1e52:	a9 e5       	ldi	r26, 0x59	; 89
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e9 e5       	ldi	r30, 0x59	; 89
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8e 7f       	andi	r24, 0xFE	; 254
    1e5e:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);
    1e60:	a9 e5       	ldi	r26, 0x59	; 89
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e9 e5       	ldi	r30, 0x59	; 89
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	8f 7e       	andi	r24, 0xEF	; 239
    1e6c:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1B);
    1e6e:	a9 e5       	ldi	r26, 0x59	; 89
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e9 e5       	ldi	r30, 0x59	; 89
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	87 7f       	andi	r24, 0xF7	; 247
    1e7a:	8c 93       	st	X, r24
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <TWI_init+0x6>
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01

    TWBR = Config_Ptr->bit_rate;
    1e90:	a0 e2       	ldi	r26, 0x20	; 32
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e9 81       	ldd	r30, Y+1	; 0x01
    1e96:	fa 81       	ldd	r31, Y+2	; 0x02
    1e98:	81 81       	ldd	r24, Z+1	; 0x01
    1e9a:	8c 93       	st	X, r24
	TWSR = 0x00;
    1e9c:	e1 e2       	ldi	r30, 0x21	; 33
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address;
    1ea2:	a2 e2       	ldi	r26, 0x22	; 34
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	80 81       	ld	r24, Z
    1eac:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1eae:	e6 e5       	ldi	r30, 0x56	; 86
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	84 e0       	ldi	r24, 0x04	; 4
    1eb4:	80 83       	st	Z, r24
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <TWI_start>:

void TWI_start(void)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ec8:	e6 e5       	ldi	r30, 0x56	; 86
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	84 ea       	ldi	r24, 0xA4	; 164
    1ece:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ed0:	e6 e5       	ldi	r30, 0x56	; 86
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	88 23       	and	r24, r24
    1ed8:	dc f7       	brge	.-10     	; 0x1ed0 <TWI_start+0x10>
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <TWI_stop>:

void TWI_stop(void)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ee8:	e6 e5       	ldi	r30, 0x56	; 86
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	84 e9       	ldi	r24, 0x94	; 148
    1eee:	80 83       	st	Z, r24
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1f02:	e3 e2       	ldi	r30, 0x23	; 35
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f0a:	e6 e5       	ldi	r30, 0x56	; 86
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	84 e8       	ldi	r24, 0x84	; 132
    1f10:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f12:	e6 e5       	ldi	r30, 0x56	; 86
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	88 23       	and	r24, r24
    1f1a:	dc f7       	brge	.-10     	; 0x1f12 <TWI_writeByte+0x1c>
}
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1f2c:	e6 e5       	ldi	r30, 0x56	; 86
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	84 ec       	ldi	r24, 0xC4	; 196
    1f32:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f34:	e6 e5       	ldi	r30, 0x56	; 86
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	88 23       	and	r24, r24
    1f3c:	dc f7       	brge	.-10     	; 0x1f34 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1f3e:	e3 e2       	ldi	r30, 0x23	; 35
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f52:	e6 e5       	ldi	r30, 0x56	; 86
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	84 e8       	ldi	r24, 0x84	; 132
    1f58:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f5a:	e6 e5       	ldi	r30, 0x56	; 86
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 23       	and	r24, r24
    1f62:	dc f7       	brge	.-10     	; 0x1f5a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1f64:	e3 e2       	ldi	r30, 0x23	; 35
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
}
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	0f 92       	push	r0
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1f7a:	e1 e2       	ldi	r30, 0x21	; 33
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 7f       	andi	r24, 0xF8	; 248
    1f82:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <UART_init+0x6>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <UART_init+0x8>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1f9e:	1a 82       	std	Y+2, r1	; 0x02
    1fa0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1fa2:	eb e2       	ldi	r30, 0x2B	; 43
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	80 83       	st	Z, r24
	 * UCSZ2 = configurations pointer value
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((Config_Ptr->bit_data &0x04) << UCSZ2);
    1faa:	aa e2       	ldi	r26, 0x2A	; 42
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	84 70       	andi	r24, 0x04	; 4
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	88 61       	ori	r24, 0x18	; 24
    1fc6:	8c 93       	st	X, r24
	 * USBS    =  Configurations pointer stop bits
	 * UCSZ1:0 = Configurations pointer bit data number
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data & 0x03) <<UCSZ0) | (Config_Ptr->parity << UPM0) | (Config_Ptr->stop_bit << USBS);
    1fc8:	a0 e4       	ldi	r26, 0x40	; 64
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fce:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	83 70       	andi	r24, 0x03	; 3
    1fd8:	90 70       	andi	r25, 0x00	; 0
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	28 2f       	mov	r18, r24
    1fe0:	20 68       	ori	r18, 0x80	; 128
    1fe2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe6:	81 81       	ldd	r24, Z+1	; 0x01
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	82 95       	swap	r24
    1fee:	92 95       	swap	r25
    1ff0:	90 7f       	andi	r25, 0xF0	; 240
    1ff2:	98 27       	eor	r25, r24
    1ff4:	80 7f       	andi	r24, 0xF0	; 240
    1ff6:	98 27       	eor	r25, r24
    1ff8:	28 2b       	or	r18, r24
    1ffa:	eb 81       	ldd	r30, Y+3	; 0x03
    1ffc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	82 2b       	or	r24, r18
    2012:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2014:	eb 81       	ldd	r30, Y+3	; 0x03
    2016:	fc 81       	ldd	r31, Y+4	; 0x04
    2018:	83 81       	ldd	r24, Z+3	; 0x03
    201a:	94 81       	ldd	r25, Z+4	; 0x04
    201c:	cc 01       	movw	r24, r24
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	aa 1f       	adc	r26, r26
    2028:	bb 1f       	adc	r27, r27
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	aa 1f       	adc	r26, r26
    2030:	bb 1f       	adc	r27, r27
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	aa 1f       	adc	r26, r26
    2038:	bb 1f       	adc	r27, r27
    203a:	9c 01       	movw	r18, r24
    203c:	ad 01       	movw	r20, r26
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	92 e1       	ldi	r25, 0x12	; 18
    2042:	aa e7       	ldi	r26, 0x7A	; 122
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__udivmodsi4>
    204e:	da 01       	movw	r26, r20
    2050:	c9 01       	movw	r24, r18
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2058:	e0 e4       	ldi	r30, 0x40	; 64
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	89 2f       	mov	r24, r25
    2062:	99 27       	eor	r25, r25
    2064:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2066:	e9 e2       	ldi	r30, 0x29	; 41
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	80 83       	st	Z, r24
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2088:	eb e2       	ldi	r30, 0x2B	; 43
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	80 72       	andi	r24, 0x20	; 32
    2094:	90 70       	andi	r25, 0x00	; 0
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	b9 f3       	breq	.-18     	; 0x2088 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    209a:	ec e2       	ldi	r30, 0x2C	; 44
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    20b2:	eb e2       	ldi	r30, 0x2B	; 43
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	88 23       	and	r24, r24
    20ba:	dc f7       	brge	.-10     	; 0x20b2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    20bc:	ec e2       	ldi	r30, 0x2C	; 44
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <UART_sendString+0x6>
    20ce:	0f 92       	push	r0
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	9b 83       	std	Y+3, r25	; 0x03
    20d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20d8:	19 82       	std	Y+1, r1	; 0x01
    20da:	0e c0       	rjmp	.+28     	; 0x20f8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	9b 81       	ldd	r25, Y+3	; 0x03
    20e6:	fc 01       	movw	r30, r24
    20e8:	e2 0f       	add	r30, r18
    20ea:	f3 1f       	adc	r31, r19
    20ec:	80 81       	ld	r24, Z
    20ee:	0e 94 3e 10 	call	0x207c	; 0x207c <UART_sendByte>
		i++;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	fc 01       	movw	r30, r24
    2104:	e2 0f       	add	r30, r18
    2106:	f3 1f       	adc	r31, r19
    2108:	80 81       	ld	r24, Z
    210a:	88 23       	and	r24, r24
    210c:	39 f7       	brne	.-50     	; 0x20dc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <UART_receiveString+0xa>
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    212e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	8c 01       	movw	r16, r24
    213c:	02 0f       	add	r16, r18
    213e:	13 1f       	adc	r17, r19
    2140:	0e 94 55 10 	call	0x20aa	; 0x20aa <UART_recieveByte>
    2144:	f8 01       	movw	r30, r16
    2146:	80 83       	st	Z, r24
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	8f 5f       	subi	r24, 0xFF	; 255
    214e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	9b 81       	ldd	r25, Y+3	; 0x03
    215a:	8c 01       	movw	r16, r24
    215c:	02 0f       	add	r16, r18
    215e:	13 1f       	adc	r17, r19
    2160:	0e 94 55 10 	call	0x20aa	; 0x20aa <UART_recieveByte>
    2164:	f8 01       	movw	r30, r16
    2166:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	fc 01       	movw	r30, r24
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	80 81       	ld	r24, Z
    217a:	83 32       	cpi	r24, 0x23	; 35
    217c:	31 f7       	brne	.-52     	; 0x214a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	9b 81       	ldd	r25, Y+3	; 0x03
    2188:	fc 01       	movw	r30, r24
    218a:	e2 0f       	add	r30, r18
    218c:	f3 1f       	adc	r31, r19
    218e:	10 82       	st	Z, r1
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <__udivmodsi4>:
    21a0:	a1 e2       	ldi	r26, 0x21	; 33
    21a2:	1a 2e       	mov	r1, r26
    21a4:	aa 1b       	sub	r26, r26
    21a6:	bb 1b       	sub	r27, r27
    21a8:	fd 01       	movw	r30, r26
    21aa:	0d c0       	rjmp	.+26     	; 0x21c6 <__udivmodsi4_ep>

000021ac <__udivmodsi4_loop>:
    21ac:	aa 1f       	adc	r26, r26
    21ae:	bb 1f       	adc	r27, r27
    21b0:	ee 1f       	adc	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	a2 17       	cp	r26, r18
    21b6:	b3 07       	cpc	r27, r19
    21b8:	e4 07       	cpc	r30, r20
    21ba:	f5 07       	cpc	r31, r21
    21bc:	20 f0       	brcs	.+8      	; 0x21c6 <__udivmodsi4_ep>
    21be:	a2 1b       	sub	r26, r18
    21c0:	b3 0b       	sbc	r27, r19
    21c2:	e4 0b       	sbc	r30, r20
    21c4:	f5 0b       	sbc	r31, r21

000021c6 <__udivmodsi4_ep>:
    21c6:	66 1f       	adc	r22, r22
    21c8:	77 1f       	adc	r23, r23
    21ca:	88 1f       	adc	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	1a 94       	dec	r1
    21d0:	69 f7       	brne	.-38     	; 0x21ac <__udivmodsi4_loop>
    21d2:	60 95       	com	r22
    21d4:	70 95       	com	r23
    21d6:	80 95       	com	r24
    21d8:	90 95       	com	r25
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	bd 01       	movw	r22, r26
    21e0:	cf 01       	movw	r24, r30
    21e2:	08 95       	ret

000021e4 <__prologue_saves__>:
    21e4:	2f 92       	push	r2
    21e6:	3f 92       	push	r3
    21e8:	4f 92       	push	r4
    21ea:	5f 92       	push	r5
    21ec:	6f 92       	push	r6
    21ee:	7f 92       	push	r7
    21f0:	8f 92       	push	r8
    21f2:	9f 92       	push	r9
    21f4:	af 92       	push	r10
    21f6:	bf 92       	push	r11
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	ca 1b       	sub	r28, r26
    220e:	db 0b       	sbc	r29, r27
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	09 94       	ijmp

0000221c <__epilogue_restores__>:
    221c:	2a 88       	ldd	r2, Y+18	; 0x12
    221e:	39 88       	ldd	r3, Y+17	; 0x11
    2220:	48 88       	ldd	r4, Y+16	; 0x10
    2222:	5f 84       	ldd	r5, Y+15	; 0x0f
    2224:	6e 84       	ldd	r6, Y+14	; 0x0e
    2226:	7d 84       	ldd	r7, Y+13	; 0x0d
    2228:	8c 84       	ldd	r8, Y+12	; 0x0c
    222a:	9b 84       	ldd	r9, Y+11	; 0x0b
    222c:	aa 84       	ldd	r10, Y+10	; 0x0a
    222e:	b9 84       	ldd	r11, Y+9	; 0x09
    2230:	c8 84       	ldd	r12, Y+8	; 0x08
    2232:	df 80       	ldd	r13, Y+7	; 0x07
    2234:	ee 80       	ldd	r14, Y+6	; 0x06
    2236:	fd 80       	ldd	r15, Y+5	; 0x05
    2238:	0c 81       	ldd	r16, Y+4	; 0x04
    223a:	1b 81       	ldd	r17, Y+3	; 0x03
    223c:	aa 81       	ldd	r26, Y+2	; 0x02
    223e:	b9 81       	ldd	r27, Y+1	; 0x01
    2240:	ce 0f       	add	r28, r30
    2242:	d1 1d       	adc	r29, r1
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	ed 01       	movw	r28, r26
    2250:	08 95       	ret

00002252 <_exit>:
    2252:	f8 94       	cli

00002254 <__stop_program>:
    2254:	ff cf       	rjmp	.-2      	; 0x2254 <__stop_program>
