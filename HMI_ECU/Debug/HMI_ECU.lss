
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00002f94  00003028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800154  00800154  0000311c  2**0
                  ALLOC
  3 .stab         00002cb8  00000000  00000000  0000311c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001375  00000000  00000000  00005dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007149  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007289  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000acdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b897  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__vector_6>
      1c:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 35       	cpi	r26, 0x59	; 89
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * Return      : void
 */
void display_wrong_password_message(void);

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6f 97       	sbiw	r28, 0x1f	; 31
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 pressed_key;
	/*
	 * Enable Global Interrupt I-Bit
	 * for timer interrupts
	 */
	SREG |= (1 << 7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	/*
	 * Drivers Initialization Functions
	 * UART, LCD
	 */
	UART_init(&uart_configurations);
     b68:	88 e4       	ldi	r24, 0x48	; 72
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <UART_init>
	LCD_init();
     b70:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_init>
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <main+0x34>
	/*
	 * Create a new password first time the system is used
	 */
	while (!create_new_password())
	{
		display_umatched_passwords();
     b76:	0e 94 96 09 	call	0x132c	; 0x132c <display_umatched_passwords>
	UART_init(&uart_configurations);
	LCD_init();
	/*
	 * Create a new password first time the system is used
	 */
	while (!create_new_password())
     b7a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <create_new_password>
     b7e:	88 23       	and	r24, r24
     b80:	d1 f3       	breq	.-12     	; 0xb76 <main+0x30>
	{
		display_umatched_passwords();
	}
	display_passwords_match_message();
     b82:	0e 94 29 0a 	call	0x1452	; 0x1452 <display_passwords_match_message>
	* If the user pressed '-' then change the password
	* If the user pressed any other key, display error message
	*/
	for (;;)
	{
		display_program_menu();
     b86:	0e 94 81 09 	call	0x1302	; 0x1302 <display_program_menu>
		pressed_key = KEYPAD_getPressedKey();
     b8a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
     b8e:	8d 8f       	std	Y+29, r24	; 0x1d
     b90:	10 c0       	rjmp	.+32     	; 0xbb2 <main+0x6c>
		while (!verify_login_password())
		{
			display_wrong_password_message();
     b92:	0e 94 b4 0a 	call	0x1568	; 0x1568 <display_wrong_password_message>
			g_password_trails++;
     b96:	80 91 55 01 	lds	r24, 0x0155
     b9a:	8f 5f       	subi	r24, 0xFF	; 255
     b9c:	80 93 55 01 	sts	0x0155, r24
			if (g_password_trails == 3)
     ba0:	80 91 55 01 	lds	r24, 0x0155
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	29 f4       	brne	.+10     	; 0xbb2 <main+0x6c>
			{
				trigger_system_alarm();
     ba8:	0e 94 8f 08 	call	0x111e	; 0x111e <trigger_system_alarm>
				g_password_trails = 0;
     bac:	10 92 55 01 	sts	0x0155, r1
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <main+0x74>
	*/
	for (;;)
	{
		display_program_menu();
		pressed_key = KEYPAD_getPressedKey();
		while (!verify_login_password())
     bb2:	0e 94 29 07 	call	0xe52	; 0xe52 <verify_login_password>
     bb6:	88 23       	and	r24, r24
     bb8:	61 f3       	breq	.-40     	; 0xb92 <main+0x4c>
		}
		/*
		 * If the user didn't type the password correct in the three times
		 * don't go to the switch case and start a new loop
		 */
		if(!g_is_logged_in)
     bba:	80 91 56 01 	lds	r24, 0x0156
     bbe:	88 23       	and	r24, r24
     bc0:	11 f3       	breq	.-60     	; 0xb86 <main+0x40>
		{
			continue;
		}
		switch (pressed_key)
     bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3f 8f       	std	Y+31, r19	; 0x1f
     bca:	2e 8f       	std	Y+30, r18	; 0x1e
     bcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bce:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bd0:	8b 32       	cpi	r24, 0x2B	; 43
     bd2:	91 05       	cpc	r25, r1
     bd4:	31 f0       	breq	.+12     	; 0xbe2 <main+0x9c>
     bd6:	2e 8d       	ldd	r18, Y+30	; 0x1e
     bd8:	3f 8d       	ldd	r19, Y+31	; 0x1f
     bda:	2d 32       	cpi	r18, 0x2D	; 45
     bdc:	31 05       	cpc	r19, r1
     bde:	31 f0       	breq	.+12     	; 0xbec <main+0xa6>
     be0:	0c c0       	rjmp	.+24     	; 0xbfa <main+0xb4>
		{
		case '+':
			open_door();
     be2:	0e 94 b9 08 	call	0x1172	; 0x1172 <open_door>
     be6:	81 c0       	rjmp	.+258    	; 0xcea <main+0x1a4>
			break;
		case '-':
			while (!create_new_password())
			{
				display_umatched_passwords();
     be8:	0e 94 96 09 	call	0x132c	; 0x132c <display_umatched_passwords>
		{
		case '+':
			open_door();
			break;
		case '-':
			while (!create_new_password())
     bec:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <create_new_password>
     bf0:	88 23       	and	r24, r24
     bf2:	d1 f3       	breq	.-12     	; 0xbe8 <main+0xa2>
			{
				display_umatched_passwords();
			}
			display_passwords_match_message();
     bf4:	0e 94 29 0a 	call	0x1452	; 0x1452 <display_passwords_match_message>
     bf8:	78 c0       	rjmp	.+240    	; 0xcea <main+0x1a4>
			break;
		default:
			LCD_clearScreen();
     bfa:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
			LCD_displayString("Wrong Key");
     bfe:	80 e6       	ldi	r24, 0x60	; 96
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	aa e7       	ldi	r26, 0x7A	; 122
     c0c:	b4 e4       	ldi	r27, 0x44	; 68
     c0e:	89 8f       	std	Y+25, r24	; 0x19
     c10:	9a 8f       	std	Y+26, r25	; 0x1a
     c12:	ab 8f       	std	Y+27, r26	; 0x1b
     c14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c16:	69 8d       	ldd	r22, Y+25	; 0x19
     c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	4a ef       	ldi	r20, 0xFA	; 250
     c24:	54 e4       	ldi	r21, 0x44	; 68
     c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	8d 8b       	std	Y+21, r24	; 0x15
     c30:	9e 8b       	std	Y+22, r25	; 0x16
     c32:	af 8b       	std	Y+23, r26	; 0x17
     c34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c36:	6d 89       	ldd	r22, Y+21	; 0x15
     c38:	7e 89       	ldd	r23, Y+22	; 0x16
     c3a:	8f 89       	ldd	r24, Y+23	; 0x17
     c3c:	98 8d       	ldd	r25, Y+24	; 0x18
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e8       	ldi	r20, 0x80	; 128
     c44:	5f e3       	ldi	r21, 0x3F	; 63
     c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c4a:	88 23       	and	r24, r24
     c4c:	2c f4       	brge	.+10     	; 0xc58 <main+0x112>
		__ticks = 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	9c 8b       	std	Y+20, r25	; 0x14
     c54:	8b 8b       	std	Y+19, r24	; 0x13
     c56:	3f c0       	rjmp	.+126    	; 0xcd6 <main+0x190>
	else if (__tmp > 65535)
     c58:	6d 89       	ldd	r22, Y+21	; 0x15
     c5a:	7e 89       	ldd	r23, Y+22	; 0x16
     c5c:	8f 89       	ldd	r24, Y+23	; 0x17
     c5e:	98 8d       	ldd	r25, Y+24	; 0x18
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	3f ef       	ldi	r19, 0xFF	; 255
     c64:	4f e7       	ldi	r20, 0x7F	; 127
     c66:	57 e4       	ldi	r21, 0x47	; 71
     c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c6c:	18 16       	cp	r1, r24
     c6e:	4c f5       	brge	.+82     	; 0xcc2 <main+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c70:	69 8d       	ldd	r22, Y+25	; 0x19
     c72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e2       	ldi	r20, 0x20	; 32
     c7e:	51 e4       	ldi	r21, 0x41	; 65
     c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	9c 8b       	std	Y+20, r25	; 0x14
     c96:	8b 8b       	std	Y+19, r24	; 0x13
     c98:	0f c0       	rjmp	.+30     	; 0xcb8 <main+0x172>
     c9a:	88 ec       	ldi	r24, 0xC8	; 200
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9a 8b       	std	Y+18, r25	; 0x12
     ca0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca2:	89 89       	ldd	r24, Y+17	; 0x11
     ca4:	9a 89       	ldd	r25, Y+18	; 0x12
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <main+0x160>
     caa:	9a 8b       	std	Y+18, r25	; 0x12
     cac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cae:	8b 89       	ldd	r24, Y+19	; 0x13
     cb0:	9c 89       	ldd	r25, Y+20	; 0x14
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	9c 8b       	std	Y+20, r25	; 0x14
     cb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb8:	8b 89       	ldd	r24, Y+19	; 0x13
     cba:	9c 89       	ldd	r25, Y+20	; 0x14
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	69 f7       	brne	.-38     	; 0xc9a <main+0x154>
     cc0:	14 c0       	rjmp	.+40     	; 0xcea <main+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc2:	6d 89       	ldd	r22, Y+21	; 0x15
     cc4:	7e 89       	ldd	r23, Y+22	; 0x16
     cc6:	8f 89       	ldd	r24, Y+23	; 0x17
     cc8:	98 8d       	ldd	r25, Y+24	; 0x18
     cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	9c 8b       	std	Y+20, r25	; 0x14
     cd4:	8b 8b       	std	Y+19, r24	; 0x13
     cd6:	8b 89       	ldd	r24, Y+19	; 0x13
     cd8:	9c 89       	ldd	r25, Y+20	; 0x14
     cda:	98 8b       	std	Y+16, r25	; 0x10
     cdc:	8f 87       	std	Y+15, r24	; 0x0f
     cde:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce0:	98 89       	ldd	r25, Y+16	; 0x10
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <main+0x19c>
     ce6:	98 8b       	std	Y+16, r25	; 0x10
     ce8:	8f 87       	std	Y+15, r24	; 0x0f
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a6 e9       	ldi	r26, 0x96	; 150
     cf0:	b3 e4       	ldi	r27, 0x43	; 67
     cf2:	8b 87       	std	Y+11, r24	; 0x0b
     cf4:	9c 87       	std	Y+12, r25	; 0x0c
     cf6:	ad 87       	std	Y+13, r26	; 0x0d
     cf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     d00:	9e 85       	ldd	r25, Y+14	; 0x0e
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a ef       	ldi	r20, 0xFA	; 250
     d08:	54 e4       	ldi	r21, 0x44	; 68
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	8f 83       	std	Y+7, r24	; 0x07
     d14:	98 87       	std	Y+8, r25	; 0x08
     d16:	a9 87       	std	Y+9, r26	; 0x09
     d18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d1a:	6f 81       	ldd	r22, Y+7	; 0x07
     d1c:	78 85       	ldd	r23, Y+8	; 0x08
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d2e:	88 23       	and	r24, r24
     d30:	2c f4       	brge	.+10     	; 0xd3c <main+0x1f6>
		__ticks = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9e 83       	std	Y+6, r25	; 0x06
     d38:	8d 83       	std	Y+5, r24	; 0x05
     d3a:	3f c0       	rjmp	.+126    	; 0xdba <main+0x274>
	else if (__tmp > 65535)
     d3c:	6f 81       	ldd	r22, Y+7	; 0x07
     d3e:	78 85       	ldd	r23, Y+8	; 0x08
     d40:	89 85       	ldd	r24, Y+9	; 0x09
     d42:	9a 85       	ldd	r25, Y+10	; 0x0a
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d50:	18 16       	cp	r1, r24
     d52:	4c f5       	brge	.+82     	; 0xda6 <main+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e2       	ldi	r20, 0x20	; 32
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	9e 83       	std	Y+6, r25	; 0x06
     d7a:	8d 83       	std	Y+5, r24	; 0x05
     d7c:	0f c0       	rjmp	.+30     	; 0xd9c <main+0x256>
     d7e:	88 ec       	ldi	r24, 0xC8	; 200
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	8b 83       	std	Y+3, r24	; 0x03
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0x244>
     d8e:	9c 83       	std	Y+4, r25	; 0x04
     d90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	69 f7       	brne	.-38     	; 0xd7e <main+0x238>
     da4:	14 c0       	rjmp	.+40     	; 0xdce <main+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da6:	6f 81       	ldd	r22, Y+7	; 0x07
     da8:	78 85       	ldd	r23, Y+8	; 0x08
     daa:	89 85       	ldd	r24, Y+9	; 0x09
     dac:	9a 85       	ldd	r25, Y+10	; 0x0a
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	8d 81       	ldd	r24, Y+5	; 0x05
     dbc:	9e 81       	ldd	r25, Y+6	; 0x06
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0x280>
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(300);
		/*
		 * Log the user out again
		*/
		g_is_logged_in = FALSE;
     dce:	10 92 56 01 	sts	0x0156, r1
     dd2:	d9 ce       	rjmp	.-590    	; 0xb86 <main+0x40>

00000dd4 <create_new_password>:
 * Return      : bool
 *  			 TRUE if the password is created successfully
 *	 		   	 FALSE if the password is not created successfully
 */
bool create_new_password()
{
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	2f 97       	sbiw	r28, 0x0f	; 15
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
	 * Arrays to hold the passwords
	 *
	 */
	uint8 first_password[7];
	uint8 second_password[7];
	LCD_clearScreen();
     de8:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	/*
	 * Display the LCD messages
	 * Get the first password from the user
	 * Get the second password from the user
	 */
	LCD_displayString("Enter New Pass");
     dec:	8a e6       	ldi	r24, 0x6A	; 106
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	get_password_input(first_password);
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 5f 07 	call	0xebe	; 0xebe <get_password_input>
	LCD_clearScreen();
     dfc:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Re-enter Pass");
     e00:	89 e7       	ldi	r24, 0x79	; 121
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	get_password_input(second_password);
     e08:	ce 01       	movw	r24, r28
     e0a:	08 96       	adiw	r24, 0x08	; 8
     e0c:	0e 94 5f 07 	call	0xebe	; 0xebe <get_password_input>
	/*
	 * Send the new password command to the control ECU
	 */
	UART_sendByte(UART_NEW_PASSWORD);
     e10:	81 ea       	ldi	r24, 0xA1	; 161
     e12:	0e 94 98 16 	call	0x2d30	; 0x2d30 <UART_sendByte>
	/* Wait for the control ECU to sync */
	while (UART_recieveByte() != UART_CONFIRMATION)
     e16:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UART_recieveByte>
     e1a:	8f 3f       	cpi	r24, 0xFF	; 255
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <create_new_password+0x42>
	/*
	 * Send the two passwords to the control ECU
	 * If the two passwords match, the control ECU will send UART_VALID_PASSWORDS
	 * If the two passwords don't match, the control ECU will send UART_INVALID_PASSWORDS
	 */
	UART_sendString(first_password);
     e1e:	ce 01       	movw	r24, r28
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_sendString>
	UART_sendString(second_password);
     e26:	ce 01       	movw	r24, r28
     e28:	08 96       	adiw	r24, 0x08	; 8
     e2a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_sendString>
	/*
	 * Wait for the control ECU response
	 */
	if (UART_recieveByte() == UART_VALID_PASSWORDS)
     e2e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UART_recieveByte>
     e32:	82 3a       	cpi	r24, 0xA2	; 162
     e34:	19 f4       	brne	.+6      	; 0xe3c <create_new_password+0x68>
	{
		return TRUE;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	8f 87       	std	Y+15, r24	; 0x0f
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <create_new_password+0x6a>
	}
	return FALSE;
     e3c:	1f 86       	std	Y+15, r1	; 0x0f
     e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     e40:	2f 96       	adiw	r28, 0x0f	; 15
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <verify_login_password>:
 * Return      : bool
 * 				 TRUE if the password is correct
 * 				 FALSE if the password is incorrect
 */
bool verify_login_password()
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	28 97       	sbiw	r28, 0x08	; 8
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
	uint8 password[7];
	/*
	 * Display the LCD messages
	 * Get the password from the user
	 */
	LCD_clearScreen();
     e66:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Enter Pass: ");
     e6a:	87 e8       	ldi	r24, 0x87	; 135
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	get_password_input(password);
     e72:	ce 01       	movw	r24, r28
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	0e 94 5f 07 	call	0xebe	; 0xebe <get_password_input>
	/*
	 * Send the login command to the control ECU
	 */
	UART_sendByte(UART_LOGIN);
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 98 16 	call	0x2d30	; 0x2d30 <UART_sendByte>
	/*
	 * Wait for the control ECU to sync
	 */
	while (UART_recieveByte() != UART_CONFIRMATION)
     e80:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UART_recieveByte>
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	e1 f7       	brne	.-8      	; 0xe80 <verify_login_password+0x2e>
	 * If the password is correct, the control ECU will send UART_LOGIN_SUCCESS
	 * If the password is incorrect, the control ECU will send UART_LOGIN_FAIL
	 * Return TRUE if the password is correct
	 * Return FALSE if the password is incorrect
	 */
	UART_sendString(password);
     e88:	ce 01       	movw	r24, r28
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <UART_sendString>
	if (UART_recieveByte() == UART_LOGIN_SUCCESS)
     e90:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UART_recieveByte>
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	41 f4       	brne	.+16     	; 0xea8 <verify_login_password+0x56>
	{
		g_is_logged_in = TRUE;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 56 01 	sts	0x0156, r24
		g_password_trails = 0;
     e9e:	10 92 55 01 	sts	0x0155, r1
		return TRUE;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	88 87       	std	Y+8, r24	; 0x08
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <verify_login_password+0x58>
	}
	return FALSE;
     ea8:	18 86       	std	Y+8, r1	; 0x08
     eaa:	88 85       	ldd	r24, Y+8	; 0x08
}
     eac:	28 96       	adiw	r28, 0x08	; 8
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <get_password_input>:
 * Description : Function to take password from user and store it in array passed to it
 * Input       : uint8 *passwords (pointer to array to store the password in)
 * Return      : void
 */
void get_password_input(uint8 *password)
{
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	a0 97       	sbiw	r28, 0x20	; 32
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	98 a3       	std	Y+32, r25	; 0x20
     ed8:	8f 8f       	std	Y+31, r24	; 0x1f
	 * Move the cursor to the second line
	 * Display the '*' character instead of the pressed key
	 * Wait for 250 ms to avoid debouncing
	 * Store the pressed key in the password array
	 */
	LCD_moveCursor(1, 0);
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_moveCursor>
	for (int i = 0; i < 5; i++)
     ee2:	1e 8e       	std	Y+30, r1	; 0x1e
     ee4:	1d 8e       	std	Y+29, r1	; 0x1d
     ee6:	85 c0       	rjmp	.+266    	; 0xff2 <get_password_input+0x134>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a6 e9       	ldi	r26, 0x96	; 150
     eee:	b3 e4       	ldi	r27, 0x43	; 67
     ef0:	89 8f       	std	Y+25, r24	; 0x19
     ef2:	9a 8f       	std	Y+26, r25	; 0x1a
     ef4:	ab 8f       	std	Y+27, r26	; 0x1b
     ef6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef8:	69 8d       	ldd	r22, Y+25	; 0x19
     efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	4a ef       	ldi	r20, 0xFA	; 250
     f06:	54 e4       	ldi	r21, 0x44	; 68
     f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	8d 8b       	std	Y+21, r24	; 0x15
     f12:	9e 8b       	std	Y+22, r25	; 0x16
     f14:	af 8b       	std	Y+23, r26	; 0x17
     f16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f18:	6d 89       	ldd	r22, Y+21	; 0x15
     f1a:	7e 89       	ldd	r23, Y+22	; 0x16
     f1c:	8f 89       	ldd	r24, Y+23	; 0x17
     f1e:	98 8d       	ldd	r25, Y+24	; 0x18
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	2c f4       	brge	.+10     	; 0xf3a <get_password_input+0x7c>
		__ticks = 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9c 8b       	std	Y+20, r25	; 0x14
     f36:	8b 8b       	std	Y+19, r24	; 0x13
     f38:	3f c0       	rjmp	.+126    	; 0xfb8 <get_password_input+0xfa>
	else if (__tmp > 65535)
     f3a:	6d 89       	ldd	r22, Y+21	; 0x15
     f3c:	7e 89       	ldd	r23, Y+22	; 0x16
     f3e:	8f 89       	ldd	r24, Y+23	; 0x17
     f40:	98 8d       	ldd	r25, Y+24	; 0x18
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	3f ef       	ldi	r19, 0xFF	; 255
     f46:	4f e7       	ldi	r20, 0x7F	; 127
     f48:	57 e4       	ldi	r21, 0x47	; 71
     f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4e:	18 16       	cp	r1, r24
     f50:	4c f5       	brge	.+82     	; 0xfa4 <get_password_input+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	69 8d       	ldd	r22, Y+25	; 0x19
     f54:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	51 e4       	ldi	r21, 0x41	; 65
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	9c 8b       	std	Y+20, r25	; 0x14
     f78:	8b 8b       	std	Y+19, r24	; 0x13
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <get_password_input+0xdc>
     f7c:	88 ec       	ldi	r24, 0xC8	; 200
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9a 8b       	std	Y+18, r25	; 0x12
     f82:	89 8b       	std	Y+17, r24	; 0x11
     f84:	89 89       	ldd	r24, Y+17	; 0x11
     f86:	9a 89       	ldd	r25, Y+18	; 0x12
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <get_password_input+0xca>
     f8c:	9a 8b       	std	Y+18, r25	; 0x12
     f8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f90:	8b 89       	ldd	r24, Y+19	; 0x13
     f92:	9c 89       	ldd	r25, Y+20	; 0x14
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9c 8b       	std	Y+20, r25	; 0x14
     f98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9a:	8b 89       	ldd	r24, Y+19	; 0x13
     f9c:	9c 89       	ldd	r25, Y+20	; 0x14
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	69 f7       	brne	.-38     	; 0xf7c <get_password_input+0xbe>
     fa2:	14 c0       	rjmp	.+40     	; 0xfcc <get_password_input+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa4:	6d 89       	ldd	r22, Y+21	; 0x15
     fa6:	7e 89       	ldd	r23, Y+22	; 0x16
     fa8:	8f 89       	ldd	r24, Y+23	; 0x17
     faa:	98 8d       	ldd	r25, Y+24	; 0x18
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9c 8b       	std	Y+20, r25	; 0x14
     fb6:	8b 8b       	std	Y+19, r24	; 0x13
     fb8:	8b 89       	ldd	r24, Y+19	; 0x13
     fba:	9c 89       	ldd	r25, Y+20	; 0x14
     fbc:	98 8b       	std	Y+16, r25	; 0x10
     fbe:	8f 87       	std	Y+15, r24	; 0x0f
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	98 89       	ldd	r25, Y+16	; 0x10
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <get_password_input+0x106>
     fc8:	98 8b       	std	Y+16, r25	; 0x10
     fca:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(300);
		password[i] = KEYPAD_getPressedKey();
     fcc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fce:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd2:	98 a1       	ldd	r25, Y+32	; 0x20
     fd4:	8c 01       	movw	r16, r24
     fd6:	02 0f       	add	r16, r18
     fd8:	13 1f       	adc	r17, r19
     fda:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
     fde:	f8 01       	movw	r30, r16
     fe0:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     fe2:	8a e2       	ldi	r24, 0x2A	; 42
     fe4:	0e 94 93 12 	call	0x2526	; 0x2526 <LCD_displayCharacter>
	 * Display the '*' character instead of the pressed key
	 * Wait for 250 ms to avoid debouncing
	 * Store the pressed key in the password array
	 */
	LCD_moveCursor(1, 0);
	for (int i = 0; i < 5; i++)
     fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	9e 8f       	std	Y+30, r25	; 0x1e
     ff0:	8d 8f       	std	Y+29, r24	; 0x1d
     ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ff6:	85 30       	cpi	r24, 0x05	; 5
     ff8:	91 05       	cpc	r25, r1
     ffa:	0c f4       	brge	.+2      	; 0xffe <get_password_input+0x140>
     ffc:	75 cf       	rjmp	.-278    	; 0xee8 <get_password_input+0x2a>
	}
	/*
	 * Add the '#' character to the end of the password
	 * Add the '\0' character to the end of the password
	 */
	password[5] = '#';
     ffe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1000:	98 a1       	ldd	r25, Y+32	; 0x20
    1002:	fc 01       	movw	r30, r24
    1004:	35 96       	adiw	r30, 0x05	; 5
    1006:	83 e2       	ldi	r24, 0x23	; 35
    1008:	80 83       	st	Z, r24
	password[6] = '\0';
    100a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    100c:	98 a1       	ldd	r25, Y+32	; 0x20
    100e:	fc 01       	movw	r30, r24
    1010:	36 96       	adiw	r30, 0x06	; 6
    1012:	10 82       	st	Z, r1
	/*
	 * Display the '=' character to indicate that the user should press the enter key
	 * Wait for the user to press the enter key
	 */
	LCD_displayString(" Enter '='");
    1014:	84 e9       	ldi	r24, 0x94	; 148
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	/* wait for the user to press enter key */
	while (KEYPAD_getPressedKey() != '=')
    101c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <KEYPAD_getPressedKey>
    1020:	8d 33       	cpi	r24, 0x3D	; 61
    1022:	e1 f7       	brne	.-8      	; 0x101c <get_password_input+0x15e>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	aa e7       	ldi	r26, 0x7A	; 122
    102a:	b3 e4       	ldi	r27, 0x43	; 67
    102c:	8b 87       	std	Y+11, r24	; 0x0b
    102e:	9c 87       	std	Y+12, r25	; 0x0c
    1030:	ad 87       	std	Y+13, r26	; 0x0d
    1032:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1034:	6b 85       	ldd	r22, Y+11	; 0x0b
    1036:	7c 85       	ldd	r23, Y+12	; 0x0c
    1038:	8d 85       	ldd	r24, Y+13	; 0x0d
    103a:	9e 85       	ldd	r25, Y+14	; 0x0e
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	4a ef       	ldi	r20, 0xFA	; 250
    1042:	54 e4       	ldi	r21, 0x44	; 68
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	8f 83       	std	Y+7, r24	; 0x07
    104e:	98 87       	std	Y+8, r25	; 0x08
    1050:	a9 87       	std	Y+9, r26	; 0x09
    1052:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1054:	6f 81       	ldd	r22, Y+7	; 0x07
    1056:	78 85       	ldd	r23, Y+8	; 0x08
    1058:	89 85       	ldd	r24, Y+9	; 0x09
    105a:	9a 85       	ldd	r25, Y+10	; 0x0a
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1068:	88 23       	and	r24, r24
    106a:	2c f4       	brge	.+10     	; 0x1076 <get_password_input+0x1b8>
		__ticks = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	3f c0       	rjmp	.+126    	; 0x10f4 <get_password_input+0x236>
	else if (__tmp > 65535)
    1076:	6f 81       	ldd	r22, Y+7	; 0x07
    1078:	78 85       	ldd	r23, Y+8	; 0x08
    107a:	89 85       	ldd	r24, Y+9	; 0x09
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	4f e7       	ldi	r20, 0x7F	; 127
    1084:	57 e4       	ldi	r21, 0x47	; 71
    1086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    108a:	18 16       	cp	r1, r24
    108c:	4c f5       	brge	.+82     	; 0x10e0 <get_password_input+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1090:	7c 85       	ldd	r23, Y+12	; 0x0c
    1092:	8d 85       	ldd	r24, Y+13	; 0x0d
    1094:	9e 85       	ldd	r25, Y+14	; 0x0e
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e2       	ldi	r20, 0x20	; 32
    109c:	51 e4       	ldi	r21, 0x41	; 65
    109e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	bc 01       	movw	r22, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
    10b6:	0f c0       	rjmp	.+30     	; 0x10d6 <get_password_input+0x218>
    10b8:	88 ec       	ldi	r24, 0xC8	; 200
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <get_password_input+0x206>
    10c8:	9c 83       	std	Y+4, r25	; 0x04
    10ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	9e 83       	std	Y+6, r25	; 0x06
    10d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	69 f7       	brne	.-38     	; 0x10b8 <get_password_input+0x1fa>
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <get_password_input+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e0:	6f 81       	ldd	r22, Y+7	; 0x07
    10e2:	78 85       	ldd	r23, Y+8	; 0x08
    10e4:	89 85       	ldd	r24, Y+9	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	8d 83       	std	Y+5, r24	; 0x05
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <get_password_input+0x242>
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
	{
	}
	_delay_ms(250);
	return;
}
    1108:	a0 96       	adiw	r28, 0x20	; 32
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <trigger_system_alarm>:
 * 				 Then it de-initialize the timer and reset the seconds variable
 * Input       : void
 * Return      : void
 */
void trigger_system_alarm(void)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Send the alarm trigger code to the control ECU
	 */
	UART_sendByte(UART_ACTIVATE_ALARM);
    1126:	86 e0       	ldi	r24, 0x06	; 6
    1128:	0e 94 98 16 	call	0x2d30	; 0x2d30 <UART_sendByte>
	/*
	 * Start the timer module
	 */
	Timer1_setCallBack(timer_increase_ticks);
    112c:	85 e7       	ldi	r24, 0x75	; 117
    112e:	99 e0       	ldi	r25, 0x09	; 9
    1130:	0e 94 99 15 	call	0x2b32	; 0x2b32 <Timer1_setCallBack>
	Timer1_init(&timer1_configurations);
    1134:	8d e4       	ldi	r24, 0x4D	; 77
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <Timer1_init>
	/*
	 * Display the LCD messages
	 * Wait for 60 seconds
	 */
	LCD_clearScreen();
    113c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Error...");
    1140:	8f e9       	ldi	r24, 0x9F	; 159
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_moveCursor>
	LCD_displayString("Alarm Activated");
    1150:	88 ea       	ldi	r24, 0xA8	; 168
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	while (g_timer_ticks < 60)
    1158:	80 91 54 01 	lds	r24, 0x0154
    115c:	8c 33       	cpi	r24, 0x3C	; 60
    115e:	e0 f3       	brcs	.-8      	; 0x1158 <trigger_system_alarm+0x3a>
	{
	}
	LCD_clearScreen();
    1160:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	/*
	 * De-initialize the timer
	 * Reset the seconds variable for next time
	 */
	Timer1_deInit();
    1164:	0e 94 f7 15 	call	0x2bee	; 0x2bee <Timer1_deInit>
	g_timer_ticks = 0;
    1168:	10 92 54 01 	sts	0x0154, r1
	return;
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <open_door>:
 * 				 It resets the seconds variable for next time
 * Input       : void
 * Return      : void
 */
void open_door(void)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	2e 97       	sbiw	r28, 0x0e	; 14
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Display the LCD messages
	 */
	LCD_clearScreen();
    1186:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Door Opening");
    118a:	88 eb       	ldi	r24, 0xB8	; 184
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	/*
	 * Send the open door command to the control ECU
	 */
	UART_sendByte(UART_OPEN_DOOR);
    1192:	85 e0       	ldi	r24, 0x05	; 5
    1194:	0e 94 98 16 	call	0x2d30	; 0x2d30 <UART_sendByte>
	/*
	 * Start the timer module
	 */
	Timer1_init(&timer1_configurations);
    1198:	8d e4       	ldi	r24, 0x4D	; 77
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <Timer1_init>
	Timer1_setCallBack(timer_increase_ticks);
    11a0:	85 e7       	ldi	r24, 0x75	; 117
    11a2:	99 e0       	ldi	r25, 0x09	; 9
    11a4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <Timer1_setCallBack>
	/*
	 * Wait 15 seconds until	the door is open
	 * Display the LCD messages
	 */
	while (g_timer_ticks < 15)
    11a8:	80 91 54 01 	lds	r24, 0x0154
    11ac:	8f 30       	cpi	r24, 0x0F	; 15
    11ae:	e0 f3       	brcs	.-8      	; 0x11a8 <open_door+0x36>
	{
	}
	g_timer_ticks = 0;
    11b0:	10 92 54 01 	sts	0x0154, r1
	LCD_clearScreen();
    11b4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Door Open");
    11b8:	85 ec       	ldi	r24, 0xC5	; 197
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	/*
	 * Wait 3 seconds to hold the door open
	 * Display the LCD messages
	 */
	while (g_timer_ticks < 3)
    11c0:	80 91 54 01 	lds	r24, 0x0154
    11c4:	83 30       	cpi	r24, 0x03	; 3
    11c6:	e0 f3       	brcs	.-8      	; 0x11c0 <open_door+0x4e>
	{
	}
	g_timer_ticks = 0;
    11c8:	10 92 54 01 	sts	0x0154, r1
	LCD_clearScreen();
    11cc:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Door Closing");
    11d0:	8f ec       	ldi	r24, 0xCF	; 207
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	/*
	 * Wait 15 seconds until the door is closed
	 * Display the LCD messages
	 */
	while (g_timer_ticks < 15)
    11d8:	80 91 54 01 	lds	r24, 0x0154
    11dc:	8f 30       	cpi	r24, 0x0F	; 15
    11de:	e0 f3       	brcs	.-8      	; 0x11d8 <open_door+0x66>
	{
	}
	LCD_clearScreen();
    11e0:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Door Closed");
    11e4:	8c ed       	ldi	r24, 0xDC	; 220
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	g_timer_ticks = 0;
    11ec:	10 92 54 01 	sts	0x0154, r1
	/*
	 * De-initialize the timer
	 */
	Timer1_deInit();
    11f0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <Timer1_deInit>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	aa e7       	ldi	r26, 0x7A	; 122
    11fa:	b4 e4       	ldi	r27, 0x44	; 68
    11fc:	8b 87       	std	Y+11, r24	; 0x0b
    11fe:	9c 87       	std	Y+12, r25	; 0x0c
    1200:	ad 87       	std	Y+13, r26	; 0x0d
    1202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1204:	6b 85       	ldd	r22, Y+11	; 0x0b
    1206:	7c 85       	ldd	r23, Y+12	; 0x0c
    1208:	8d 85       	ldd	r24, Y+13	; 0x0d
    120a:	9e 85       	ldd	r25, Y+14	; 0x0e
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	4a ef       	ldi	r20, 0xFA	; 250
    1212:	54 e4       	ldi	r21, 0x44	; 68
    1214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	8f 83       	std	Y+7, r24	; 0x07
    121e:	98 87       	std	Y+8, r25	; 0x08
    1220:	a9 87       	std	Y+9, r26	; 0x09
    1222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1224:	6f 81       	ldd	r22, Y+7	; 0x07
    1226:	78 85       	ldd	r23, Y+8	; 0x08
    1228:	89 85       	ldd	r24, Y+9	; 0x09
    122a:	9a 85       	ldd	r25, Y+10	; 0x0a
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	5f e3       	ldi	r21, 0x3F	; 63
    1234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1238:	88 23       	and	r24, r24
    123a:	2c f4       	brge	.+10     	; 0x1246 <open_door+0xd4>
		__ticks = 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	3f c0       	rjmp	.+126    	; 0x12c4 <open_door+0x152>
	else if (__tmp > 65535)
    1246:	6f 81       	ldd	r22, Y+7	; 0x07
    1248:	78 85       	ldd	r23, Y+8	; 0x08
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	3f ef       	ldi	r19, 0xFF	; 255
    1252:	4f e7       	ldi	r20, 0x7F	; 127
    1254:	57 e4       	ldi	r21, 0x47	; 71
    1256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    125a:	18 16       	cp	r1, r24
    125c:	4c f5       	brge	.+82     	; 0x12b0 <open_door+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1260:	7c 85       	ldd	r23, Y+12	; 0x0c
    1262:	8d 85       	ldd	r24, Y+13	; 0x0d
    1264:	9e 85       	ldd	r25, Y+14	; 0x0e
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	51 e4       	ldi	r21, 0x41	; 65
    126e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	0f c0       	rjmp	.+30     	; 0x12a6 <open_door+0x134>
    1288:	88 ec       	ldi	r24, 0xC8	; 200
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <open_door+0x122>
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	69 f7       	brne	.-38     	; 0x1288 <open_door+0x116>
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <open_door+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <open_door+0x15e>
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return;
}
    12d8:	2e 96       	adiw	r28, 0x0e	; 14
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <timer_increase_ticks>:
 * 				 It increases the seconds variable every second by the timer interrupt
 * Input       : void
 * Return      : void
 */
void timer_increase_ticks(void)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	g_timer_ticks++;
    12f2:	80 91 54 01 	lds	r24, 0x0154
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	80 93 54 01 	sts	0x0154, r24
}
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <display_program_menu>:
 *
 * Input       : void
 * Return      : void
 */
void display_program_menu(void)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    130a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    130e:	88 ee       	ldi	r24, 0xE8	; 232
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    131e:	86 ef       	ldi	r24, 0xF6	; 246
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <display_umatched_passwords>:
 * 				 passwords that don't match
 * Input       : void
 * Return      : void
 */
void display_umatched_passwords(void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	2e 97       	sbiw	r28, 0x0e	; 14
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1340:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Passes Don't");
    1344:	86 e0       	ldi	r24, 0x06	; 6
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
	LCD_moveCursor(1, 0);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_moveCursor>
	LCD_displayString("Match, try again");
    1354:	83 e1       	ldi	r24, 0x13	; 19
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	aa e7       	ldi	r26, 0x7A	; 122
    1362:	b4 e4       	ldi	r27, 0x44	; 68
    1364:	8b 87       	std	Y+11, r24	; 0x0b
    1366:	9c 87       	std	Y+12, r25	; 0x0c
    1368:	ad 87       	std	Y+13, r26	; 0x0d
    136a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	6b 85       	ldd	r22, Y+11	; 0x0b
    136e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1370:	8d 85       	ldd	r24, Y+13	; 0x0d
    1372:	9e 85       	ldd	r25, Y+14	; 0x0e
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a ef       	ldi	r20, 0xFA	; 250
    137a:	54 e4       	ldi	r21, 0x44	; 68
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8f 83       	std	Y+7, r24	; 0x07
    1386:	98 87       	std	Y+8, r25	; 0x08
    1388:	a9 87       	std	Y+9, r26	; 0x09
    138a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <display_umatched_passwords+0x82>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <display_umatched_passwords+0x100>
	else if (__tmp > 65535)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <display_umatched_passwords+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <display_umatched_passwords+0xe2>
    13f0:	88 ec       	ldi	r24, 0xC8	; 200
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 83       	std	Y+4, r25	; 0x04
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <display_umatched_passwords+0xd0>
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <display_umatched_passwords+0xc4>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <display_umatched_passwords+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <display_umatched_passwords+0x10c>
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    1440:	2e 96       	adiw	r28, 0x0e	; 14
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <display_passwords_match_message>:
 * 				 passwords that match
 * Input       : void
 * Return      : void
 */
void display_passwords_match_message(void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	2e 97       	sbiw	r28, 0x0e	; 14
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1466:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Passes Match");
    146a:	84 e2       	ldi	r24, 0x24	; 36
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	aa e7       	ldi	r26, 0x7A	; 122
    1478:	b4 e4       	ldi	r27, 0x44	; 68
    147a:	8b 87       	std	Y+11, r24	; 0x0b
    147c:	9c 87       	std	Y+12, r25	; 0x0c
    147e:	ad 87       	std	Y+13, r26	; 0x0d
    1480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a ef       	ldi	r20, 0xFA	; 250
    1490:	54 e4       	ldi	r21, 0x44	; 68
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8f 83       	std	Y+7, r24	; 0x07
    149c:	98 87       	std	Y+8, r25	; 0x08
    149e:	a9 87       	std	Y+9, r26	; 0x09
    14a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <display_passwords_match_message+0x72>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <display_passwords_match_message+0xf0>
	else if (__tmp > 65535)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <display_passwords_match_message+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <display_passwords_match_message+0xd2>
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <display_passwords_match_message+0xc0>
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <display_passwords_match_message+0xb4>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <display_passwords_match_message+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <display_passwords_match_message+0xfc>
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    1556:	2e 96       	adiw	r28, 0x0e	; 14
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <display_wrong_password_message>:
 * Description : Function to display message if the user entered wrong password
 * Input       : void
 * Return      : void
 */
void display_wrong_password_message(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	2e 97       	sbiw	r28, 0x0e	; 14
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    157c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <LCD_clearScreen>
	LCD_displayString("Wrong Password");
    1580:	81 e3       	ldi	r24, 0x31	; 49
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	aa e7       	ldi	r26, 0x7A	; 122
    158e:	b4 e4       	ldi	r27, 0x44	; 68
    1590:	8b 87       	std	Y+11, r24	; 0x0b
    1592:	9c 87       	std	Y+12, r25	; 0x0c
    1594:	ad 87       	std	Y+13, r26	; 0x0d
    1596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6b 85       	ldd	r22, Y+11	; 0x0b
    159a:	7c 85       	ldd	r23, Y+12	; 0x0c
    159c:	8d 85       	ldd	r24, Y+13	; 0x0d
    159e:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a ef       	ldi	r20, 0xFA	; 250
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8f 83       	std	Y+7, r24	; 0x07
    15b2:	98 87       	std	Y+8, r25	; 0x08
    15b4:	a9 87       	std	Y+9, r26	; 0x09
    15b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <display_wrong_password_message+0x72>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <display_wrong_password_message+0xf0>
	else if (__tmp > 65535)
    15da:	6f 81       	ldd	r22, Y+7	; 0x07
    15dc:	78 85       	ldd	r23, Y+8	; 0x08
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <display_wrong_password_message+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	0f c0       	rjmp	.+30     	; 0x163a <display_wrong_password_message+0xd2>
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <display_wrong_password_message+0xc0>
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <display_wrong_password_message+0xb4>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <display_wrong_password_message+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <display_wrong_password_message+0xfc>
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    166c:	2e 96       	adiw	r28, 0x0e	; 14
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <GPIO_setupPinDirection+0x6>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <GPIO_setupPinDirection+0x8>
    1686:	0f 92       	push	r0
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	08 f0       	brcs	.+2      	; 0x169a <GPIO_setupPinDirection+0x1c>
    1698:	d5 c0       	rjmp	.+426    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <GPIO_setupPinDirection+0x24>
    16a0:	d1 c0       	rjmp	.+418    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3d 83       	std	Y+5, r19	; 0x05
    16aa:	2c 83       	std	Y+4, r18	; 0x04
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <GPIO_setupPinDirection+0x3a>
    16b6:	43 c0       	rjmp	.+134    	; 0x173e <GPIO_setupPinDirection+0xc0>
    16b8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ba:	3d 81       	ldd	r19, Y+5	; 0x05
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	2c f4       	brge	.+10     	; 0x16cc <GPIO_setupPinDirection+0x4e>
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	71 f0       	breq	.+28     	; 0x16e6 <GPIO_setupPinDirection+0x68>
    16ca:	bc c0       	rjmp	.+376    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
    16cc:	2c 81       	ldd	r18, Y+4	; 0x04
    16ce:	3d 81       	ldd	r19, Y+5	; 0x05
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <GPIO_setupPinDirection+0x5a>
    16d6:	5f c0       	rjmp	.+190    	; 0x1796 <GPIO_setupPinDirection+0x118>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <GPIO_setupPinDirection+0x66>
    16e2:	85 c0       	rjmp	.+266    	; 0x17ee <GPIO_setupPinDirection+0x170>
    16e4:	af c0       	rjmp	.+350    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	a1 f4       	brne	.+40     	; 0x1714 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16ec:	aa e3       	ldi	r26, 0x3A	; 58
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ea e3       	ldi	r30, 0x3A	; 58
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_setupPinDirection+0x8c>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_setupPinDirection+0x88>
    170e:	84 2b       	or	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	98 c0       	rjmp	.+304    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1714:	aa e3       	ldi	r26, 0x3A	; 58
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ea e3       	ldi	r30, 0x3A	; 58
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_setupPinDirection+0xb4>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <GPIO_setupPinDirection+0xb0>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	83 c0       	rjmp	.+262    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	a1 f4       	brne	.+40     	; 0x176c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1744:	a7 e3       	ldi	r26, 0x37	; 55
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e7 e3       	ldi	r30, 0x37	; 55
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_setupPinDirection+0xe4>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_setupPinDirection+0xe0>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	6c c0       	rjmp	.+216    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    176c:	a7 e3       	ldi	r26, 0x37	; 55
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e3       	ldi	r30, 0x37	; 55
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_setupPinDirection+0x10c>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_setupPinDirection+0x108>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	57 c0       	rjmp	.+174    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	a1 f4       	brne	.+40     	; 0x17c4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    179c:	a4 e3       	ldi	r26, 0x34	; 52
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 e3       	ldi	r30, 0x34	; 52
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_setupPinDirection+0x13c>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_setupPinDirection+0x138>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	40 c0       	rjmp	.+128    	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17c4:	a4 e3       	ldi	r26, 0x34	; 52
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e4 e3       	ldi	r30, 0x34	; 52
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_setupPinDirection+0x164>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_setupPinDirection+0x160>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	2b c0       	rjmp	.+86     	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	a1 f4       	brne	.+40     	; 0x181c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17f4:	a1 e3       	ldi	r26, 0x31	; 49
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e1 e3       	ldi	r30, 0x31	; 49
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_setupPinDirection+0x194>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_setupPinDirection+0x190>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    181c:	a1 e3       	ldi	r26, 0x31	; 49
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e1 e3       	ldi	r30, 0x31	; 49
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_setupPinDirection+0x1bc>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_setupPinDirection+0x1b8>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <GPIO_writePin+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <GPIO_writePin+0x8>
    185c:	0f 92       	push	r0
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	6a 83       	std	Y+2, r22	; 0x02
    1866:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	08 f0       	brcs	.+2      	; 0x1870 <GPIO_writePin+0x1c>
    186e:	d5 c0       	rjmp	.+426    	; 0x1a1a <GPIO_writePin+0x1c6>
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <GPIO_writePin+0x24>
    1876:	d1 c0       	rjmp	.+418    	; 0x1a1a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	3d 83       	std	Y+5, r19	; 0x05
    1880:	2c 83       	std	Y+4, r18	; 0x04
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <GPIO_writePin+0x3a>
    188c:	43 c0       	rjmp	.+134    	; 0x1914 <GPIO_writePin+0xc0>
    188e:	2c 81       	ldd	r18, Y+4	; 0x04
    1890:	3d 81       	ldd	r19, Y+5	; 0x05
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	2c f4       	brge	.+10     	; 0x18a2 <GPIO_writePin+0x4e>
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	71 f0       	breq	.+28     	; 0x18bc <GPIO_writePin+0x68>
    18a0:	bc c0       	rjmp	.+376    	; 0x1a1a <GPIO_writePin+0x1c6>
    18a2:	2c 81       	ldd	r18, Y+4	; 0x04
    18a4:	3d 81       	ldd	r19, Y+5	; 0x05
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <GPIO_writePin+0x5a>
    18ac:	5f c0       	rjmp	.+190    	; 0x196c <GPIO_writePin+0x118>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <GPIO_writePin+0x66>
    18b8:	85 c0       	rjmp	.+266    	; 0x19c4 <GPIO_writePin+0x170>
    18ba:	af c0       	rjmp	.+350    	; 0x1a1a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	a1 f4       	brne	.+40     	; 0x18ea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_writePin+0x8c>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_writePin+0x88>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	98 c0       	rjmp	.+304    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18ea:	ab e3       	ldi	r26, 0x3B	; 59
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e3       	ldi	r30, 0x3B	; 59
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_writePin+0xb4>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_writePin+0xb0>
    190c:	80 95       	com	r24
    190e:	84 23       	and	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	83 c0       	rjmp	.+262    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	a1 f4       	brne	.+40     	; 0x1942 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    191a:	a8 e3       	ldi	r26, 0x38	; 56
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e8 e3       	ldi	r30, 0x38	; 56
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_writePin+0xe4>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_writePin+0xe0>
    193c:	84 2b       	or	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	6c c0       	rjmp	.+216    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1942:	a8 e3       	ldi	r26, 0x38	; 56
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e8 e3       	ldi	r30, 0x38	; 56
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <GPIO_writePin+0x10c>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <GPIO_writePin+0x108>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	57 c0       	rjmp	.+174    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	a1 f4       	brne	.+40     	; 0x199a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1972:	a5 e3       	ldi	r26, 0x35	; 53
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e5 e3       	ldi	r30, 0x35	; 53
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <GPIO_writePin+0x13c>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <GPIO_writePin+0x138>
    1994:	84 2b       	or	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	40 c0       	rjmp	.+128    	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    199a:	a5 e3       	ldi	r26, 0x35	; 53
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e3       	ldi	r30, 0x35	; 53
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <GPIO_writePin+0x164>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <GPIO_writePin+0x160>
    19bc:	80 95       	com	r24
    19be:	84 23       	and	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	2b c0       	rjmp	.+86     	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	a1 f4       	brne	.+40     	; 0x19f2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19ca:	a2 e3       	ldi	r26, 0x32	; 50
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e2 e3       	ldi	r30, 0x32	; 50
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <GPIO_writePin+0x194>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <GPIO_writePin+0x190>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19f2:	a2 e3       	ldi	r26, 0x32	; 50
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e2 e3       	ldi	r30, 0x32	; 50
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_writePin+0x1bc>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_writePin+0x1b8>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <GPIO_readPin+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <GPIO_readPin+0x8>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	8a 83       	std	Y+2, r24	; 0x02
    1a3a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <GPIO_readPin+0x1c>
    1a44:	84 c0       	rjmp	.+264    	; 0x1b4e <GPIO_readPin+0x124>
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <GPIO_readPin+0x24>
    1a4c:	80 c0       	rjmp	.+256    	; 0x1b4e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 83       	std	Y+5, r19	; 0x05
    1a56:	2c 83       	std	Y+4, r18	; 0x04
    1a58:	4c 81       	ldd	r20, Y+4	; 0x04
    1a5a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a5c:	41 30       	cpi	r20, 0x01	; 1
    1a5e:	51 05       	cpc	r21, r1
    1a60:	79 f1       	breq	.+94     	; 0x1ac0 <GPIO_readPin+0x96>
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <GPIO_readPin+0x4e>
    1a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a70:	21 15       	cp	r18, r1
    1a72:	31 05       	cpc	r19, r1
    1a74:	69 f0       	breq	.+26     	; 0x1a90 <GPIO_readPin+0x66>
    1a76:	6b c0       	rjmp	.+214    	; 0x1b4e <GPIO_readPin+0x124>
    1a78:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7c:	42 30       	cpi	r20, 0x02	; 2
    1a7e:	51 05       	cpc	r21, r1
    1a80:	b9 f1       	breq	.+110    	; 0x1af0 <GPIO_readPin+0xc6>
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	9d 81       	ldd	r25, Y+5	; 0x05
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	91 05       	cpc	r25, r1
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <GPIO_readPin+0x64>
    1a8c:	49 c0       	rjmp	.+146    	; 0x1b20 <GPIO_readPin+0xf6>
    1a8e:	5f c0       	rjmp	.+190    	; 0x1b4e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a90:	e9 e3       	ldi	r30, 0x39	; 57
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a9 01       	movw	r20, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_readPin+0x7e>
    1aa4:	55 95       	asr	r21
    1aa6:	47 95       	ror	r20
    1aa8:	8a 95       	dec	r24
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_readPin+0x7a>
    1aac:	ca 01       	movw	r24, r20
    1aae:	81 70       	andi	r24, 0x01	; 1
    1ab0:	90 70       	andi	r25, 0x00	; 0
    1ab2:	88 23       	and	r24, r24
    1ab4:	19 f0       	breq	.+6      	; 0x1abc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	49 c0       	rjmp	.+146    	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	47 c0       	rjmp	.+142    	; 0x1b4e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ac0:	e6 e3       	ldi	r30, 0x36	; 54
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <GPIO_readPin+0xae>
    1ad4:	55 95       	asr	r21
    1ad6:	47 95       	ror	r20
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <GPIO_readPin+0xaa>
    1adc:	ca 01       	movw	r24, r20
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	88 23       	and	r24, r24
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	31 c0       	rjmp	.+98     	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aec:	19 82       	std	Y+1, r1	; 0x01
    1aee:	2f c0       	rjmp	.+94     	; 0x1b4e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1af0:	e3 e3       	ldi	r30, 0x33	; 51
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_readPin+0xde>
    1b04:	55 95       	asr	r21
    1b06:	47 95       	ror	r20
    1b08:	8a 95       	dec	r24
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_readPin+0xda>
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	88 23       	and	r24, r24
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	19 c0       	rjmp	.+50     	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b20:	e0 e3       	ldi	r30, 0x30	; 48
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a9 01       	movw	r20, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_readPin+0x10e>
    1b34:	55 95       	asr	r21
    1b36:	47 95       	ror	r20
    1b38:	8a 95       	dec	r24
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_readPin+0x10a>
    1b3c:	ca 01       	movw	r24, r20
    1b3e:	81 70       	andi	r24, 0x01	; 1
    1b40:	90 70       	andi	r25, 0x00	; 0
    1b42:	88 23       	and	r24, r24
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <GPIO_setupPortDirection+0x6>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <GPIO_setupPortDirection+0x8>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	84 30       	cpi	r24, 0x04	; 4
    1b74:	90 f5       	brcc	.+100    	; 0x1bda <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3c 83       	std	Y+4, r19	; 0x04
    1b7e:	2b 83       	std	Y+3, r18	; 0x03
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	91 05       	cpc	r25, r1
    1b88:	d1 f0       	breq	.+52     	; 0x1bbe <GPIO_setupPortDirection+0x5e>
    1b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <GPIO_setupPortDirection+0x3e>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	61 f0       	breq	.+24     	; 0x1bb4 <GPIO_setupPortDirection+0x54>
    1b9c:	1e c0       	rjmp	.+60     	; 0x1bda <GPIO_setupPortDirection+0x7a>
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	81 f0       	breq	.+32     	; 0x1bc8 <GPIO_setupPortDirection+0x68>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	83 30       	cpi	r24, 0x03	; 3
    1bae:	91 05       	cpc	r25, r1
    1bb0:	81 f0       	breq	.+32     	; 0x1bd2 <GPIO_setupPortDirection+0x72>
    1bb2:	13 c0       	rjmp	.+38     	; 0x1bda <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1bb4:	ea e3       	ldi	r30, 0x3A	; 58
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	80 83       	st	Z, r24
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1bbe:	e7 e3       	ldi	r30, 0x37	; 55
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	80 83       	st	Z, r24
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bc8:	e4 e3       	ldi	r30, 0x34	; 52
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	80 83       	st	Z, r24
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bd2:	e1 e3       	ldi	r30, 0x31	; 49
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <GPIO_writePort+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <GPIO_writePort+0x8>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	84 30       	cpi	r24, 0x04	; 4
    1bfc:	90 f5       	brcc	.+100    	; 0x1c62 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	3c 83       	std	Y+4, r19	; 0x04
    1c06:	2b 83       	std	Y+3, r18	; 0x03
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	d1 f0       	breq	.+52     	; 0x1c46 <GPIO_writePort+0x5e>
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <GPIO_writePort+0x3e>
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <GPIO_writePort+0x54>
    1c24:	1e c0       	rjmp	.+60     	; 0x1c62 <GPIO_writePort+0x7a>
    1c26:	2b 81       	ldd	r18, Y+3	; 0x03
    1c28:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <GPIO_writePort+0x68>
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	81 f0       	breq	.+32     	; 0x1c5a <GPIO_writePort+0x72>
    1c3a:	13 c0       	rjmp	.+38     	; 0x1c62 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c3c:	eb e3       	ldi	r30, 0x3B	; 59
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 83       	st	Z, r24
    1c44:	0e c0       	rjmp	.+28     	; 0x1c62 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c46:	e8 e3       	ldi	r30, 0x38	; 56
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	80 83       	st	Z, r24
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c50:	e5 e3       	ldi	r30, 0x35	; 53
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 83       	st	Z, r24
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c5a:	e2 e3       	ldi	r30, 0x32	; 50
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_readPort+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <GPIO_readPort+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c7e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	90 f5       	brcc	.+100    	; 0x1cea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	3c 83       	std	Y+4, r19	; 0x04
    1c8e:	2b 83       	std	Y+3, r18	; 0x03
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	91 05       	cpc	r25, r1
    1c98:	d1 f0       	breq	.+52     	; 0x1cce <GPIO_readPort+0x5e>
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <GPIO_readPort+0x3e>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	61 f0       	breq	.+24     	; 0x1cc4 <GPIO_readPort+0x54>
    1cac:	1e c0       	rjmp	.+60     	; 0x1cea <GPIO_readPort+0x7a>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	81 f0       	breq	.+32     	; 0x1cd8 <GPIO_readPort+0x68>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	83 30       	cpi	r24, 0x03	; 3
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	81 f0       	breq	.+32     	; 0x1ce2 <GPIO_readPort+0x72>
    1cc2:	13 c0       	rjmp	.+38     	; 0x1cea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1cc4:	e9 e3       	ldi	r30, 0x39	; 57
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1cce:	e6 e3       	ldi	r30, 0x36	; 54
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1cd8:	e3 e3       	ldi	r30, 0x33	; 51
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ce2:	e0 e3       	ldi	r30, 0x30	; 48
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	60 97       	sbiw	r28, 0x10	; 16
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	62 e0       	ldi	r22, 0x02	; 2
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	63 e0       	ldi	r22, 0x03	; 3
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	65 e0       	ldi	r22, 0x05	; 5
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	66 e0       	ldi	r22, 0x06	; 6
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	67 e0       	ldi	r22, 0x07	; 7
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d5e:	1f 86       	std	Y+15, r1	; 0x0f
    1d60:	ab c0       	rjmp	.+342    	; 0x1eb8 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d6c:	82 e0       	ldi	r24, 0x02	; 2
    1d6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d76:	18 8a       	std	Y+16, r1	; 0x10
    1d78:	22 c0       	rjmp	.+68     	; 0x1dbe <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d7a:	88 89       	ldd	r24, Y+16	; 0x10
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	9c 5f       	subi	r25, 0xFC	; 252
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	69 2f       	mov	r22, r25
    1d84:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <GPIO_readPin>
    1d88:	88 23       	and	r24, r24
    1d8a:	b1 f4       	brne	.+44     	; 0x1db8 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	98 2f       	mov	r25, r24
    1d9c:	88 89       	ldd	r24, Y+16	; 0x10
    1d9e:	89 0f       	add	r24, r25
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1da6:	60 96       	adiw	r28, 0x10	; 16
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1db8:	88 89       	ldd	r24, Y+16	; 0x10
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	88 8b       	std	Y+16, r24	; 0x10
    1dbe:	88 89       	ldd	r24, Y+16	; 0x10
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	d8 f2       	brcs	.-74     	; 0x1d7a <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 ea       	ldi	r26, 0xA0	; 160
    1dd4:	b0 e4       	ldi	r27, 0x40	; 64
    1dd6:	8b 87       	std	Y+11, r24	; 0x0b
    1dd8:	9c 87       	std	Y+12, r25	; 0x0c
    1dda:	ad 87       	std	Y+13, r26	; 0x0d
    1ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a ef       	ldi	r20, 0xFA	; 250
    1dec:	54 e4       	ldi	r21, 0x44	; 68
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8f 83       	std	Y+7, r24	; 0x07
    1df8:	98 87       	std	Y+8, r25	; 0x08
    1dfa:	a9 87       	std	Y+9, r26	; 0x09
    1dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <KEYPAD_getPressedKey+0x186>
    1e62:	88 ec       	ldi	r24, 0xC8	; 200
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <KEYPAD_getPressedKey+0x174>
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <KEYPAD_getPressedKey+0x168>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <KEYPAD_getPressedKey+0x1b0>
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	8f 87       	std	Y+15, r24	; 0x0f
    1eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	08 f4       	brcc	.+2      	; 0x1ec0 <KEYPAD_getPressedKey+0x1c6>
    1ebe:	51 cf       	rjmp	.-350    	; 0x1d62 <KEYPAD_getPressedKey+0x68>
    1ec0:	4e cf       	rjmp	.-356    	; 0x1d5e <KEYPAD_getPressedKey+0x64>

00001ec2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <KEYPAD_4x4_adjustKeyNumber+0x8>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ed0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	3c 83       	std	Y+4, r19	; 0x04
    1eda:	2b 83       	std	Y+3, r18	; 0x03
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	88 30       	cpi	r24, 0x08	; 8
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ee6:	70 c0       	rjmp	.+224    	; 0x1fc8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ee8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eea:	3c 81       	ldd	r19, Y+4	; 0x04
    1eec:	29 30       	cpi	r18, 0x09	; 9
    1eee:	31 05       	cpc	r19, r1
    1ef0:	5c f5       	brge	.+86     	; 0x1f48 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	84 30       	cpi	r24, 0x04	; 4
    1ef8:	91 05       	cpc	r25, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1efc:	59 c0       	rjmp	.+178    	; 0x1fb0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1efe:	2b 81       	ldd	r18, Y+3	; 0x03
    1f00:	3c 81       	ldd	r19, Y+4	; 0x04
    1f02:	25 30       	cpi	r18, 0x05	; 5
    1f04:	31 05       	cpc	r19, r1
    1f06:	9c f4       	brge	.+38     	; 0x1f2e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	91 05       	cpc	r25, r1
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f12:	48 c0       	rjmp	.+144    	; 0x1fa4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f14:	2b 81       	ldd	r18, Y+3	; 0x03
    1f16:	3c 81       	ldd	r19, Y+4	; 0x04
    1f18:	23 30       	cpi	r18, 0x03	; 3
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	0c f0       	brlt	.+2      	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f1e:	45 c0       	rjmp	.+138    	; 0x1faa <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	91 05       	cpc	r25, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f2a:	39 c0       	rjmp	.+114    	; 0x1f9e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f2c:	67 c0       	rjmp	.+206    	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f30:	3c 81       	ldd	r19, Y+4	; 0x04
    1f32:	26 30       	cpi	r18, 0x06	; 6
    1f34:	31 05       	cpc	r19, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f38:	41 c0       	rjmp	.+130    	; 0x1fbc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	87 30       	cpi	r24, 0x07	; 7
    1f40:	91 05       	cpc	r25, r1
    1f42:	0c f0       	brlt	.+2      	; 0x1f46 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f44:	3e c0       	rjmp	.+124    	; 0x1fc2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f46:	37 c0       	rjmp	.+110    	; 0x1fb6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f48:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4c:	2c 30       	cpi	r18, 0x0C	; 12
    1f4e:	31 05       	cpc	r19, r1
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f52:	46 c0       	rjmp	.+140    	; 0x1fe0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	8d 30       	cpi	r24, 0x0D	; 13
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	5c f4       	brge	.+22     	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f60:	3c 81       	ldd	r19, Y+4	; 0x04
    1f62:	2a 30       	cpi	r18, 0x0A	; 10
    1f64:	31 05       	cpc	r19, r1
    1f66:	b1 f1       	breq	.+108    	; 0x1fd4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	8b 30       	cpi	r24, 0x0B	; 11
    1f6e:	91 05       	cpc	r25, r1
    1f70:	a4 f5       	brge	.+104    	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f72:	2d c0       	rjmp	.+90     	; 0x1fce <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	2e 30       	cpi	r18, 0x0E	; 14
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	b9 f1       	breq	.+110    	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	8e 30       	cpi	r24, 0x0E	; 14
    1f84:	91 05       	cpc	r25, r1
    1f86:	7c f1       	brlt	.+94     	; 0x1fe6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f88:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8c:	2f 30       	cpi	r18, 0x0F	; 15
    1f8e:	31 05       	cpc	r19, r1
    1f90:	79 f1       	breq	.+94     	; 0x1ff0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	80 31       	cpi	r24, 0x10	; 16
    1f98:	91 05       	cpc	r25, r1
    1f9a:	69 f1       	breq	.+90     	; 0x1ff6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f9c:	2f c0       	rjmp	.+94     	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1f9e:	87 e0       	ldi	r24, 0x07	; 7
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	2e c0       	rjmp	.+92     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1fa4:	88 e0       	ldi	r24, 0x08	; 8
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	2b c0       	rjmp	.+86     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1faa:	89 e0       	ldi	r24, 0x09	; 9
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	28 c0       	rjmp	.+80     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1fb0:	85 e2       	ldi	r24, 0x25	; 37
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	25 c0       	rjmp	.+74     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	22 c0       	rjmp	.+68     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1fbc:	85 e0       	ldi	r24, 0x05	; 5
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	1f c0       	rjmp	.+62     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1fc2:	86 e0       	ldi	r24, 0x06	; 6
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	1c c0       	rjmp	.+56     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1fc8:	8a e2       	ldi	r24, 0x2A	; 42
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	19 c0       	rjmp	.+50     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	16 c0       	rjmp	.+44     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	13 c0       	rjmp	.+38     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	10 c0       	rjmp	.+32     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1fe0:	8d e2       	ldi	r24, 0x2D	; 45
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1fe6:	8d e0       	ldi	r24, 0x0D	; 13
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	0a c0       	rjmp	.+20     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1fec:	19 82       	std	Y+1, r1	; 0x01
    1fee:	08 c0       	rjmp	.+16     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ff0:	8d e3       	ldi	r24, 0x3D	; 61
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	05 c0       	rjmp	.+10     	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ff6:	8b e2       	ldi	r24, 0x2B	; 43
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	2e 97       	sbiw	r28, 0x0e	; 14
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPinDirection>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 ea       	ldi	r26, 0xA0	; 160
    203e:	b1 e4       	ldi	r27, 0x41	; 65
    2040:	8b 87       	std	Y+11, r24	; 0x0b
    2042:	9c 87       	std	Y+12, r25	; 0x0c
    2044:	ad 87       	std	Y+13, r26	; 0x0d
    2046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6b 85       	ldd	r22, Y+11	; 0x0b
    204a:	7c 85       	ldd	r23, Y+12	; 0x0c
    204c:	8d 85       	ldd	r24, Y+13	; 0x0d
    204e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a ef       	ldi	r20, 0xFA	; 250
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8f 83       	std	Y+7, r24	; 0x07
    2062:	98 87       	std	Y+8, r25	; 0x08
    2064:	a9 87       	std	Y+9, r26	; 0x09
    2066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <LCD_init+0x7a>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <LCD_init+0xf8>
	else if (__tmp > 65535)
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <LCD_init+0xda>
    20cc:	88 ec       	ldi	r24, 0xC8	; 200
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_init+0xc8>
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <LCD_init+0xbc>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_init+0x104>
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	6f ef       	ldi	r22, 0xFF	; 255
    2120:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2124:	88 e3       	ldi	r24, 0x38	; 56
    2126:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    212a:	8c e0       	ldi	r24, 0x0C	; 12
    212c:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_sendCommand>
}
    2136:	2e 96       	adiw	r28, 0x0e	; 14
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	e9 97       	sbiw	r28, 0x39	; 57
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a0 e8       	ldi	r26, 0x80	; 128
    216e:	bf e3       	ldi	r27, 0x3F	; 63
    2170:	8d ab       	std	Y+53, r24	; 0x35
    2172:	9e ab       	std	Y+54, r25	; 0x36
    2174:	af ab       	std	Y+55, r26	; 0x37
    2176:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	6d a9       	ldd	r22, Y+53	; 0x35
    217a:	7e a9       	ldd	r23, Y+54	; 0x36
    217c:	8f a9       	ldd	r24, Y+55	; 0x37
    217e:	98 ad       	ldd	r25, Y+56	; 0x38
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a ef       	ldi	r20, 0xFA	; 250
    2186:	54 e4       	ldi	r21, 0x44	; 68
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	89 ab       	std	Y+49, r24	; 0x31
    2192:	9a ab       	std	Y+50, r25	; 0x32
    2194:	ab ab       	std	Y+51, r26	; 0x33
    2196:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2198:	69 a9       	ldd	r22, Y+49	; 0x31
    219a:	7a a9       	ldd	r23, Y+50	; 0x32
    219c:	8b a9       	ldd	r24, Y+51	; 0x33
    219e:	9c a9       	ldd	r25, Y+52	; 0x34
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <LCD_sendCommand+0x72>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	98 ab       	std	Y+48, r25	; 0x30
    21b6:	8f a7       	std	Y+47, r24	; 0x2f
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    21ba:	69 a9       	ldd	r22, Y+49	; 0x31
    21bc:	7a a9       	ldd	r23, Y+50	; 0x32
    21be:	8b a9       	ldd	r24, Y+51	; 0x33
    21c0:	9c a9       	ldd	r25, Y+52	; 0x34
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	6d a9       	ldd	r22, Y+53	; 0x35
    21d4:	7e a9       	ldd	r23, Y+54	; 0x36
    21d6:	8f a9       	ldd	r24, Y+55	; 0x37
    21d8:	98 ad       	ldd	r25, Y+56	; 0x38
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	98 ab       	std	Y+48, r25	; 0x30
    21f8:	8f a7       	std	Y+47, r24	; 0x2f
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <LCD_sendCommand+0xd2>
    21fc:	88 ec       	ldi	r24, 0xC8	; 200
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e a7       	std	Y+46, r25	; 0x2e
    2202:	8d a7       	std	Y+45, r24	; 0x2d
    2204:	8d a5       	ldd	r24, Y+45	; 0x2d
    2206:	9e a5       	ldd	r25, Y+46	; 0x2e
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_sendCommand+0xc0>
    220c:	9e a7       	std	Y+46, r25	; 0x2e
    220e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8f a5       	ldd	r24, Y+47	; 0x2f
    2212:	98 a9       	ldd	r25, Y+48	; 0x30
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	98 ab       	std	Y+48, r25	; 0x30
    2218:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8f a5       	ldd	r24, Y+47	; 0x2f
    221c:	98 a9       	ldd	r25, Y+48	; 0x30
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <LCD_sendCommand+0xb4>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	69 a9       	ldd	r22, Y+49	; 0x31
    2226:	7a a9       	ldd	r23, Y+50	; 0x32
    2228:	8b a9       	ldd	r24, Y+51	; 0x33
    222a:	9c a9       	ldd	r25, Y+52	; 0x34
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	98 ab       	std	Y+48, r25	; 0x30
    2236:	8f a7       	std	Y+47, r24	; 0x2f
    2238:	8f a5       	ldd	r24, Y+47	; 0x2f
    223a:	98 a9       	ldd	r25, Y+48	; 0x30
    223c:	9c a7       	std	Y+44, r25	; 0x2c
    223e:	8b a7       	std	Y+43, r24	; 0x2b
    2240:	8b a5       	ldd	r24, Y+43	; 0x2b
    2242:	9c a5       	ldd	r25, Y+44	; 0x2c
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_sendCommand+0xfc>
    2248:	9c a7       	std	Y+44, r25	; 0x2c
    224a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e8       	ldi	r26, 0x80	; 128
    225c:	bf e3       	ldi	r27, 0x3F	; 63
    225e:	8f a3       	std	Y+39, r24	; 0x27
    2260:	98 a7       	std	Y+40, r25	; 0x28
    2262:	a9 a7       	std	Y+41, r26	; 0x29
    2264:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6f a1       	ldd	r22, Y+39	; 0x27
    2268:	78 a5       	ldd	r23, Y+40	; 0x28
    226a:	89 a5       	ldd	r24, Y+41	; 0x29
    226c:	9a a5       	ldd	r25, Y+42	; 0x2a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8b a3       	std	Y+35, r24	; 0x23
    2280:	9c a3       	std	Y+36, r25	; 0x24
    2282:	ad a3       	std	Y+37, r26	; 0x25
    2284:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2286:	6b a1       	ldd	r22, Y+35	; 0x23
    2288:	7c a1       	ldd	r23, Y+36	; 0x24
    228a:	8d a1       	ldd	r24, Y+37	; 0x25
    228c:	9e a1       	ldd	r25, Y+38	; 0x26
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_sendCommand+0x160>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    22a8:	6b a1       	ldd	r22, Y+35	; 0x23
    22aa:	7c a1       	ldd	r23, Y+36	; 0x24
    22ac:	8d a1       	ldd	r24, Y+37	; 0x25
    22ae:	9e a1       	ldd	r25, Y+38	; 0x26
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6f a1       	ldd	r22, Y+39	; 0x27
    22c2:	78 a5       	ldd	r23, Y+40	; 0x28
    22c4:	89 a5       	ldd	r24, Y+41	; 0x29
    22c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9a a3       	std	Y+34, r25	; 0x22
    22e6:	89 a3       	std	Y+33, r24	; 0x21
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_sendCommand+0x1c0>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	98 a3       	std	Y+32, r25	; 0x20
    22f0:	8f 8f       	std	Y+31, r24	; 0x1f
    22f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22f4:	98 a1       	ldd	r25, Y+32	; 0x20
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_sendCommand+0x1ae>
    22fa:	98 a3       	std	Y+32, r25	; 0x20
    22fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2300:	9a a1       	ldd	r25, Y+34	; 0x22
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9a a3       	std	Y+34, r25	; 0x22
    2306:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	89 a1       	ldd	r24, Y+33	; 0x21
    230a:	9a a1       	ldd	r25, Y+34	; 0x22
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_sendCommand+0x1a2>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6b a1       	ldd	r22, Y+35	; 0x23
    2314:	7c a1       	ldd	r23, Y+36	; 0x24
    2316:	8d a1       	ldd	r24, Y+37	; 0x25
    2318:	9e a1       	ldd	r25, Y+38	; 0x26
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9a a3       	std	Y+34, r25	; 0x22
    2324:	89 a3       	std	Y+33, r24	; 0x21
    2326:	89 a1       	ldd	r24, Y+33	; 0x21
    2328:	9a a1       	ldd	r25, Y+34	; 0x22
    232a:	9e 8f       	std	Y+30, r25	; 0x1e
    232c:	8d 8f       	std	Y+29, r24	; 0x1d
    232e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2330:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_sendCommand+0x1ea>
    2336:	9e 8f       	std	Y+30, r25	; 0x1e
    2338:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	69 ad       	ldd	r22, Y+57	; 0x39
    233e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <GPIO_writePort>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e8       	ldi	r26, 0x80	; 128
    2348:	bf e3       	ldi	r27, 0x3F	; 63
    234a:	89 8f       	std	Y+25, r24	; 0x19
    234c:	9a 8f       	std	Y+26, r25	; 0x1a
    234e:	ab 8f       	std	Y+27, r26	; 0x1b
    2350:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	69 8d       	ldd	r22, Y+25	; 0x19
    2354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a ef       	ldi	r20, 0xFA	; 250
    2360:	54 e4       	ldi	r21, 0x44	; 68
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8d 8b       	std	Y+21, r24	; 0x15
    236c:	9e 8b       	std	Y+22, r25	; 0x16
    236e:	af 8b       	std	Y+23, r26	; 0x17
    2370:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2372:	6d 89       	ldd	r22, Y+21	; 0x15
    2374:	7e 89       	ldd	r23, Y+22	; 0x16
    2376:	8f 89       	ldd	r24, Y+23	; 0x17
    2378:	98 8d       	ldd	r25, Y+24	; 0x18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <LCD_sendCommand+0x24c>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	69 8d       	ldd	r22, Y+25	; 0x19
    23ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <LCD_sendCommand+0x2ac>
    23d6:	88 ec       	ldi	r24, 0xC8	; 200
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9a 8b       	std	Y+18, r25	; 0x12
    23dc:	89 8b       	std	Y+17, r24	; 0x11
    23de:	89 89       	ldd	r24, Y+17	; 0x11
    23e0:	9a 89       	ldd	r25, Y+18	; 0x12
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_sendCommand+0x29a>
    23e6:	9a 8b       	std	Y+18, r25	; 0x12
    23e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	9c 89       	ldd	r25, Y+20	; 0x14
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <LCD_sendCommand+0x28e>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	8b 89       	ldd	r24, Y+19	; 0x13
    2414:	9c 89       	ldd	r25, Y+20	; 0x14
    2416:	98 8b       	std	Y+16, r25	; 0x10
    2418:	8f 87       	std	Y+15, r24	; 0x0f
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	98 89       	ldd	r25, Y+16	; 0x10
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_sendCommand+0x2d6>
    2422:	98 8b       	std	Y+16, r25	; 0x10
    2424:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 e8       	ldi	r26, 0x80	; 128
    2436:	bf e3       	ldi	r27, 0x3F	; 63
    2438:	8b 87       	std	Y+11, r24	; 0x0b
    243a:	9c 87       	std	Y+12, r25	; 0x0c
    243c:	ad 87       	std	Y+13, r26	; 0x0d
    243e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	6b 85       	ldd	r22, Y+11	; 0x0b
    2442:	7c 85       	ldd	r23, Y+12	; 0x0c
    2444:	8d 85       	ldd	r24, Y+13	; 0x0d
    2446:	9e 85       	ldd	r25, Y+14	; 0x0e
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a ef       	ldi	r20, 0xFA	; 250
    244e:	54 e4       	ldi	r21, 0x44	; 68
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8f 83       	std	Y+7, r24	; 0x07
    245a:	98 87       	std	Y+8, r25	; 0x08
    245c:	a9 87       	std	Y+9, r26	; 0x09
    245e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	6b 85       	ldd	r22, Y+11	; 0x0b
    249c:	7c 85       	ldd	r23, Y+12	; 0x0c
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LCD_sendCommand+0x39a>
    24c4:	88 ec       	ldi	r24, 0xC8	; 200
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_sendCommand+0x388>
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <LCD_sendCommand+0x37c>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_sendCommand+0x3c4>
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2514:	e9 96       	adiw	r28, 0x39	; 57
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	e9 97       	sbiw	r28, 0x39	; 57
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e8       	ldi	r26, 0x80	; 128
    254c:	bf e3       	ldi	r27, 0x3F	; 63
    254e:	8d ab       	std	Y+53, r24	; 0x35
    2550:	9e ab       	std	Y+54, r25	; 0x36
    2552:	af ab       	std	Y+55, r26	; 0x37
    2554:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2556:	6d a9       	ldd	r22, Y+53	; 0x35
    2558:	7e a9       	ldd	r23, Y+54	; 0x36
    255a:	8f a9       	ldd	r24, Y+55	; 0x37
    255c:	98 ad       	ldd	r25, Y+56	; 0x38
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4a ef       	ldi	r20, 0xFA	; 250
    2564:	54 e4       	ldi	r21, 0x44	; 68
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	89 ab       	std	Y+49, r24	; 0x31
    2570:	9a ab       	std	Y+50, r25	; 0x32
    2572:	ab ab       	std	Y+51, r26	; 0x33
    2574:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2576:	69 a9       	ldd	r22, Y+49	; 0x31
    2578:	7a a9       	ldd	r23, Y+50	; 0x32
    257a:	8b a9       	ldd	r24, Y+51	; 0x33
    257c:	9c a9       	ldd	r25, Y+52	; 0x34
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	2c f4       	brge	.+10     	; 0x2598 <LCD_displayCharacter+0x72>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	98 ab       	std	Y+48, r25	; 0x30
    2594:	8f a7       	std	Y+47, r24	; 0x2f
    2596:	3f c0       	rjmp	.+126    	; 0x2616 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2598:	69 a9       	ldd	r22, Y+49	; 0x31
    259a:	7a a9       	ldd	r23, Y+50	; 0x32
    259c:	8b a9       	ldd	r24, Y+51	; 0x33
    259e:	9c a9       	ldd	r25, Y+52	; 0x34
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	57 e4       	ldi	r21, 0x47	; 71
    25a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	4c f5       	brge	.+82     	; 0x2602 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	6d a9       	ldd	r22, Y+53	; 0x35
    25b2:	7e a9       	ldd	r23, Y+54	; 0x36
    25b4:	8f a9       	ldd	r24, Y+55	; 0x37
    25b6:	98 ad       	ldd	r25, Y+56	; 0x38
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	98 ab       	std	Y+48, r25	; 0x30
    25d6:	8f a7       	std	Y+47, r24	; 0x2f
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <LCD_displayCharacter+0xd2>
    25da:	88 ec       	ldi	r24, 0xC8	; 200
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9e a7       	std	Y+46, r25	; 0x2e
    25e0:	8d a7       	std	Y+45, r24	; 0x2d
    25e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    25e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_displayCharacter+0xc0>
    25ea:	9e a7       	std	Y+46, r25	; 0x2e
    25ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f0:	98 a9       	ldd	r25, Y+48	; 0x30
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	98 ab       	std	Y+48, r25	; 0x30
    25f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fa:	98 a9       	ldd	r25, Y+48	; 0x30
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	69 f7       	brne	.-38     	; 0x25da <LCD_displayCharacter+0xb4>
    2600:	14 c0       	rjmp	.+40     	; 0x262a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2602:	69 a9       	ldd	r22, Y+49	; 0x31
    2604:	7a a9       	ldd	r23, Y+50	; 0x32
    2606:	8b a9       	ldd	r24, Y+51	; 0x33
    2608:	9c a9       	ldd	r25, Y+52	; 0x34
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	98 ab       	std	Y+48, r25	; 0x30
    2614:	8f a7       	std	Y+47, r24	; 0x2f
    2616:	8f a5       	ldd	r24, Y+47	; 0x2f
    2618:	98 a9       	ldd	r25, Y+48	; 0x30
    261a:	9c a7       	std	Y+44, r25	; 0x2c
    261c:	8b a7       	std	Y+43, r24	; 0x2b
    261e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2620:	9c a5       	ldd	r25, Y+44	; 0x2c
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_displayCharacter+0xfc>
    2626:	9c a7       	std	Y+44, r25	; 0x2c
    2628:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e8       	ldi	r26, 0x80	; 128
    263a:	bf e3       	ldi	r27, 0x3F	; 63
    263c:	8f a3       	std	Y+39, r24	; 0x27
    263e:	98 a7       	std	Y+40, r25	; 0x28
    2640:	a9 a7       	std	Y+41, r26	; 0x29
    2642:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2644:	6f a1       	ldd	r22, Y+39	; 0x27
    2646:	78 a5       	ldd	r23, Y+40	; 0x28
    2648:	89 a5       	ldd	r24, Y+41	; 0x29
    264a:	9a a5       	ldd	r25, Y+42	; 0x2a
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4a ef       	ldi	r20, 0xFA	; 250
    2652:	54 e4       	ldi	r21, 0x44	; 68
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	8b a3       	std	Y+35, r24	; 0x23
    265e:	9c a3       	std	Y+36, r25	; 0x24
    2660:	ad a3       	std	Y+37, r26	; 0x25
    2662:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2664:	6b a1       	ldd	r22, Y+35	; 0x23
    2666:	7c a1       	ldd	r23, Y+36	; 0x24
    2668:	8d a1       	ldd	r24, Y+37	; 0x25
    266a:	9e a1       	ldd	r25, Y+38	; 0x26
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e8       	ldi	r20, 0x80	; 128
    2672:	5f e3       	ldi	r21, 0x3F	; 63
    2674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2678:	88 23       	and	r24, r24
    267a:	2c f4       	brge	.+10     	; 0x2686 <LCD_displayCharacter+0x160>
		__ticks = 1;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9a a3       	std	Y+34, r25	; 0x22
    2682:	89 a3       	std	Y+33, r24	; 0x21
    2684:	3f c0       	rjmp	.+126    	; 0x2704 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2686:	6b a1       	ldd	r22, Y+35	; 0x23
    2688:	7c a1       	ldd	r23, Y+36	; 0x24
    268a:	8d a1       	ldd	r24, Y+37	; 0x25
    268c:	9e a1       	ldd	r25, Y+38	; 0x26
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	4f e7       	ldi	r20, 0x7F	; 127
    2694:	57 e4       	ldi	r21, 0x47	; 71
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269a:	18 16       	cp	r1, r24
    269c:	4c f5       	brge	.+82     	; 0x26f0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269e:	6f a1       	ldd	r22, Y+39	; 0x27
    26a0:	78 a5       	ldd	r23, Y+40	; 0x28
    26a2:	89 a5       	ldd	r24, Y+41	; 0x29
    26a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9a a3       	std	Y+34, r25	; 0x22
    26c4:	89 a3       	std	Y+33, r24	; 0x21
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <LCD_displayCharacter+0x1c0>
    26c8:	88 ec       	ldi	r24, 0xC8	; 200
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	98 a3       	std	Y+32, r25	; 0x20
    26ce:	8f 8f       	std	Y+31, r24	; 0x1f
    26d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26d2:	98 a1       	ldd	r25, Y+32	; 0x20
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_displayCharacter+0x1ae>
    26d8:	98 a3       	std	Y+32, r25	; 0x20
    26da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	89 a1       	ldd	r24, Y+33	; 0x21
    26de:	9a a1       	ldd	r25, Y+34	; 0x22
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	9a a3       	std	Y+34, r25	; 0x22
    26e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	89 a1       	ldd	r24, Y+33	; 0x21
    26e8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	69 f7       	brne	.-38     	; 0x26c8 <LCD_displayCharacter+0x1a2>
    26ee:	14 c0       	rjmp	.+40     	; 0x2718 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	6b a1       	ldd	r22, Y+35	; 0x23
    26f2:	7c a1       	ldd	r23, Y+36	; 0x24
    26f4:	8d a1       	ldd	r24, Y+37	; 0x25
    26f6:	9e a1       	ldd	r25, Y+38	; 0x26
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9a a3       	std	Y+34, r25	; 0x22
    2702:	89 a3       	std	Y+33, r24	; 0x21
    2704:	89 a1       	ldd	r24, Y+33	; 0x21
    2706:	9a a1       	ldd	r25, Y+34	; 0x22
    2708:	9e 8f       	std	Y+30, r25	; 0x1e
    270a:	8d 8f       	std	Y+29, r24	; 0x1d
    270c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    270e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <LCD_displayCharacter+0x1ea>
    2714:	9e 8f       	std	Y+30, r25	; 0x1e
    2716:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	69 ad       	ldd	r22, Y+57	; 0x39
    271c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <GPIO_writePort>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	a0 e8       	ldi	r26, 0x80	; 128
    2726:	bf e3       	ldi	r27, 0x3F	; 63
    2728:	89 8f       	std	Y+25, r24	; 0x19
    272a:	9a 8f       	std	Y+26, r25	; 0x1a
    272c:	ab 8f       	std	Y+27, r26	; 0x1b
    272e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	69 8d       	ldd	r22, Y+25	; 0x19
    2732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	4a ef       	ldi	r20, 0xFA	; 250
    273e:	54 e4       	ldi	r21, 0x44	; 68
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	8d 8b       	std	Y+21, r24	; 0x15
    274a:	9e 8b       	std	Y+22, r25	; 0x16
    274c:	af 8b       	std	Y+23, r26	; 0x17
    274e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	2c f4       	brge	.+10     	; 0x2772 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9c 8b       	std	Y+20, r25	; 0x14
    276e:	8b 8b       	std	Y+19, r24	; 0x13
    2770:	3f c0       	rjmp	.+126    	; 0x27f0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2772:	6d 89       	ldd	r22, Y+21	; 0x15
    2774:	7e 89       	ldd	r23, Y+22	; 0x16
    2776:	8f 89       	ldd	r24, Y+23	; 0x17
    2778:	98 8d       	ldd	r25, Y+24	; 0x18
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	57 e4       	ldi	r21, 0x47	; 71
    2782:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	4c f5       	brge	.+82     	; 0x27dc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278a:	69 8d       	ldd	r22, Y+25	; 0x19
    278c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    278e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2790:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e2       	ldi	r20, 0x20	; 32
    2798:	51 e4       	ldi	r21, 0x41	; 65
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9c 8b       	std	Y+20, r25	; 0x14
    27b0:	8b 8b       	std	Y+19, r24	; 0x13
    27b2:	0f c0       	rjmp	.+30     	; 0x27d2 <LCD_displayCharacter+0x2ac>
    27b4:	88 ec       	ldi	r24, 0xC8	; 200
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9a 8b       	std	Y+18, r25	; 0x12
    27ba:	89 8b       	std	Y+17, r24	; 0x11
    27bc:	89 89       	ldd	r24, Y+17	; 0x11
    27be:	9a 89       	ldd	r25, Y+18	; 0x12
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_displayCharacter+0x29a>
    27c4:	9a 8b       	std	Y+18, r25	; 0x12
    27c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ca:	9c 89       	ldd	r25, Y+20	; 0x14
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9c 8b       	std	Y+20, r25	; 0x14
    27d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d2:	8b 89       	ldd	r24, Y+19	; 0x13
    27d4:	9c 89       	ldd	r25, Y+20	; 0x14
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <LCD_displayCharacter+0x28e>
    27da:	14 c0       	rjmp	.+40     	; 0x2804 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27dc:	6d 89       	ldd	r22, Y+21	; 0x15
    27de:	7e 89       	ldd	r23, Y+22	; 0x16
    27e0:	8f 89       	ldd	r24, Y+23	; 0x17
    27e2:	98 8d       	ldd	r25, Y+24	; 0x18
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9c 8b       	std	Y+20, r25	; 0x14
    27ee:	8b 8b       	std	Y+19, r24	; 0x13
    27f0:	8b 89       	ldd	r24, Y+19	; 0x13
    27f2:	9c 89       	ldd	r25, Y+20	; 0x14
    27f4:	98 8b       	std	Y+16, r25	; 0x10
    27f6:	8f 87       	std	Y+15, r24	; 0x0f
    27f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fa:	98 89       	ldd	r25, Y+16	; 0x10
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_displayCharacter+0x2d6>
    2800:	98 8b       	std	Y+16, r25	; 0x10
    2802:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GPIO_writePin>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	a0 e8       	ldi	r26, 0x80	; 128
    2814:	bf e3       	ldi	r27, 0x3F	; 63
    2816:	8b 87       	std	Y+11, r24	; 0x0b
    2818:	9c 87       	std	Y+12, r25	; 0x0c
    281a:	ad 87       	std	Y+13, r26	; 0x0d
    281c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2820:	7c 85       	ldd	r23, Y+12	; 0x0c
    2822:	8d 85       	ldd	r24, Y+13	; 0x0d
    2824:	9e 85       	ldd	r25, Y+14	; 0x0e
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a ef       	ldi	r20, 0xFA	; 250
    282c:	54 e4       	ldi	r21, 0x44	; 68
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	8f 83       	std	Y+7, r24	; 0x07
    2838:	98 87       	std	Y+8, r25	; 0x08
    283a:	a9 87       	std	Y+9, r26	; 0x09
    283c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    283e:	6f 81       	ldd	r22, Y+7	; 0x07
    2840:	78 85       	ldd	r23, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	9a 85       	ldd	r25, Y+10	; 0x0a
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2852:	88 23       	and	r24, r24
    2854:	2c f4       	brge	.+10     	; 0x2860 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	3f c0       	rjmp	.+126    	; 0x28de <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	3f ef       	ldi	r19, 0xFF	; 255
    286c:	4f e7       	ldi	r20, 0x7F	; 127
    286e:	57 e4       	ldi	r21, 0x47	; 71
    2870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2874:	18 16       	cp	r1, r24
    2876:	4c f5       	brge	.+82     	; 0x28ca <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	6b 85       	ldd	r22, Y+11	; 0x0b
    287a:	7c 85       	ldd	r23, Y+12	; 0x0c
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <LCD_displayCharacter+0x39a>
    28a2:	88 ec       	ldi	r24, 0xC8	; 200
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_displayCharacter+0x388>
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <LCD_displayCharacter+0x37c>
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_displayCharacter+0x3c4>
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28f2:	e9 96       	adiw	r28, 0x39	; 57
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <LCD_displayString+0x6>
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	9b 83       	std	Y+3, r25	; 0x03
    2912:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2914:	19 82       	std	Y+1, r1	; 0x01
    2916:	0e c0       	rjmp	.+28     	; 0x2934 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	fc 01       	movw	r30, r24
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	80 81       	ld	r24, Z
    292a:	0e 94 93 12 	call	0x2526	; 0x2526 <LCD_displayCharacter>
		i++;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	80 81       	ld	r24, Z
    2946:	88 23       	and	r24, r24
    2948:	39 f7       	brne	.-50     	; 0x2918 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	00 d0       	rcall	.+0      	; 0x295c <LCD_moveCursor+0x6>
    295c:	00 d0       	rcall	.+0      	; 0x295e <LCD_moveCursor+0x8>
    295e:	0f 92       	push	r0
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	8a 83       	std	Y+2, r24	; 0x02
    2966:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	3d 83       	std	Y+5, r19	; 0x05
    2970:	2c 83       	std	Y+4, r18	; 0x04
    2972:	8c 81       	ldd	r24, Y+4	; 0x04
    2974:	9d 81       	ldd	r25, Y+5	; 0x05
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	91 05       	cpc	r25, r1
    297a:	c1 f0       	breq	.+48     	; 0x29ac <LCD_moveCursor+0x56>
    297c:	2c 81       	ldd	r18, Y+4	; 0x04
    297e:	3d 81       	ldd	r19, Y+5	; 0x05
    2980:	22 30       	cpi	r18, 0x02	; 2
    2982:	31 05       	cpc	r19, r1
    2984:	2c f4       	brge	.+10     	; 0x2990 <LCD_moveCursor+0x3a>
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	9d 81       	ldd	r25, Y+5	; 0x05
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	61 f0       	breq	.+24     	; 0x29a6 <LCD_moveCursor+0x50>
    298e:	19 c0       	rjmp	.+50     	; 0x29c2 <LCD_moveCursor+0x6c>
    2990:	2c 81       	ldd	r18, Y+4	; 0x04
    2992:	3d 81       	ldd	r19, Y+5	; 0x05
    2994:	22 30       	cpi	r18, 0x02	; 2
    2996:	31 05       	cpc	r19, r1
    2998:	69 f0       	breq	.+26     	; 0x29b4 <LCD_moveCursor+0x5e>
    299a:	8c 81       	ldd	r24, Y+4	; 0x04
    299c:	9d 81       	ldd	r25, Y+5	; 0x05
    299e:	83 30       	cpi	r24, 0x03	; 3
    29a0:	91 05       	cpc	r25, r1
    29a2:	61 f0       	breq	.+24     	; 0x29bc <LCD_moveCursor+0x66>
    29a4:	0e c0       	rjmp	.+28     	; 0x29c2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	0b c0       	rjmp	.+22     	; 0x29c2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	80 5c       	subi	r24, 0xC0	; 192
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	07 c0       	rjmp	.+14     	; 0x29c2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	80 5f       	subi	r24, 0xF0	; 240
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	03 c0       	rjmp	.+6      	; 0x29c2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	80 5b       	subi	r24, 0xB0	; 176
    29c0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	80 68       	ori	r24, 0x80	; 128
    29c6:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_sendCommand>
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <LCD_displayStringRowColumn+0x6>
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <LCD_displayStringRowColumn+0x8>
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	6a 83       	std	Y+2, r22	; 0x02
    29ea:	5c 83       	std	Y+4, r21	; 0x04
    29ec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	6a 81       	ldd	r22, Y+2	; 0x02
    29f2:	0e 94 ab 14 	call	0x2956	; 0x2956 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	62 97       	sbiw	r28, 0x12	; 18
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	9a 8b       	std	Y+18, r25	; 0x12
    2a22:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a24:	89 89       	ldd	r24, Y+17	; 0x11
    2a26:	9a 89       	ldd	r25, Y+18	; 0x12
    2a28:	9e 01       	movw	r18, r28
    2a2a:	2f 5f       	subi	r18, 0xFF	; 255
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	b9 01       	movw	r22, r18
    2a30:	4a e0       	ldi	r20, 0x0A	; 10
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	0e 94 83 17 	call	0x2f06	; 0x2f06 <itoa>
   LCD_displayString(buff); /* Display the string */
    2a38:	ce 01       	movw	r24, r28
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayString>
}
    2a40:	62 96       	adiw	r28, 0x12	; 18
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_sendCommand>
}
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    2a66:	1f 92       	push	r1
    2a68:	0f 92       	push	r0
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	0f 92       	push	r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	2f 93       	push	r18
    2a72:	3f 93       	push	r19
    2a74:	4f 93       	push	r20
    2a76:	5f 93       	push	r21
    2a78:	6f 93       	push	r22
    2a7a:	7f 93       	push	r23
    2a7c:	8f 93       	push	r24
    2a7e:	9f 93       	push	r25
    2a80:	af 93       	push	r26
    2a82:	bf 93       	push	r27
    2a84:	ef 93       	push	r30
    2a86:	ff 93       	push	r31
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2a90:	80 91 57 01 	lds	r24, 0x0157
    2a94:	90 91 58 01 	lds	r25, 0x0158
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	29 f0       	breq	.+10     	; 0x2aa6 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a9c:	e0 91 57 01 	lds	r30, 0x0157
    2aa0:	f0 91 58 01 	lds	r31, 0x0158
    2aa4:	09 95       	icall
	}
}
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	ff 91       	pop	r31
    2aac:	ef 91       	pop	r30
    2aae:	bf 91       	pop	r27
    2ab0:	af 91       	pop	r26
    2ab2:	9f 91       	pop	r25
    2ab4:	8f 91       	pop	r24
    2ab6:	7f 91       	pop	r23
    2ab8:	6f 91       	pop	r22
    2aba:	5f 91       	pop	r21
    2abc:	4f 91       	pop	r20
    2abe:	3f 91       	pop	r19
    2ac0:	2f 91       	pop	r18
    2ac2:	0f 90       	pop	r0
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	0f 90       	pop	r0
    2ac8:	1f 90       	pop	r1
    2aca:	18 95       	reti

00002acc <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	2f 93       	push	r18
    2ad8:	3f 93       	push	r19
    2ada:	4f 93       	push	r20
    2adc:	5f 93       	push	r21
    2ade:	6f 93       	push	r22
    2ae0:	7f 93       	push	r23
    2ae2:	8f 93       	push	r24
    2ae4:	9f 93       	push	r25
    2ae6:	af 93       	push	r26
    2ae8:	bf 93       	push	r27
    2aea:	ef 93       	push	r30
    2aec:	ff 93       	push	r31
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2af6:	80 91 57 01 	lds	r24, 0x0157
    2afa:	90 91 58 01 	lds	r25, 0x0158
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	29 f0       	breq	.+10     	; 0x2b0c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b02:	e0 91 57 01 	lds	r30, 0x0157
    2b06:	f0 91 58 01 	lds	r31, 0x0158
    2b0a:	09 95       	icall
	}
}
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	ff 91       	pop	r31
    2b12:	ef 91       	pop	r30
    2b14:	bf 91       	pop	r27
    2b16:	af 91       	pop	r26
    2b18:	9f 91       	pop	r25
    2b1a:	8f 91       	pop	r24
    2b1c:	7f 91       	pop	r23
    2b1e:	6f 91       	pop	r22
    2b20:	5f 91       	pop	r21
    2b22:	4f 91       	pop	r20
    2b24:	3f 91       	pop	r19
    2b26:	2f 91       	pop	r18
    2b28:	0f 90       	pop	r0
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	0f 90       	pop	r0
    2b2e:	1f 90       	pop	r1
    2b30:	18 95       	reti

00002b32 <Timer1_setCallBack>:

/*
 * Description: Function to set the call back function for timer one to be executed by the ISR
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <Timer1_setCallBack+0x6>
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
    2b44:	90 93 58 01 	sts	0x0158, r25
    2b48:	80 93 57 01 	sts	0x0157, r24
}
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <Timer1_init>:

/*
 * Description: Function to initialize timer1 with CTC or normal mode
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <Timer1_init+0x6>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
	/* Set the initial value in TCNT1 */
	TCNT1 = Config_Ptr->initial_value;
    2b64:	ac e4       	ldi	r26, 0x4C	; 76
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	11 96       	adiw	r26, 0x01	; 1
    2b72:	9c 93       	st	X, r25
    2b74:	8e 93       	st	-X, r24

	if(Config_Ptr->mode == TIMER1_COMP_MODE){
    2b76:	e9 81       	ldd	r30, Y+1	; 0x01
    2b78:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7a:	85 81       	ldd	r24, Z+5	; 0x05
    2b7c:	81 30       	cpi	r24, 0x01	; 1
    2b7e:	c1 f4       	brne	.+48     	; 0x2bb0 <Timer1_init+0x5a>
		/*Set compare value in OCR1A reg*/
		OCR1A  = Config_Ptr->compare_value;
    2b80:	aa e4       	ldi	r26, 0x4A	; 74
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e9 81       	ldd	r30, Y+1	; 0x01
    2b86:	fa 81       	ldd	r31, Y+2	; 0x02
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	11 96       	adiw	r26, 0x01	; 1
    2b8e:	9c 93       	st	X, r25
    2b90:	8e 93       	st	-X, r24
		/* enable compare mode interrupt */
		TIMSK |= (1<<OCIE1A);
    2b92:	a9 e5       	ldi	r26, 0x59	; 89
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e9 e5       	ldi	r30, 0x59	; 89
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	80 61       	ori	r24, 0x10	; 16
    2b9e:	8c 93       	st	X, r24
		/*WGM12 bit must be set in TCCR1B in CTC mode*/
		TCCR1B |= (1<<WGM12);
    2ba0:	ae e4       	ldi	r26, 0x4E	; 78
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	ee e4       	ldi	r30, 0x4E	; 78
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 60       	ori	r24, 0x08	; 8
    2bac:	8c 93       	st	X, r24
    2bae:	0c c0       	rjmp	.+24     	; 0x2bc8 <Timer1_init+0x72>
	}
	else if (Config_Ptr->mode == TIMER1_NORMAL_MODE){
    2bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb4:	85 81       	ldd	r24, Z+5	; 0x05
    2bb6:	88 23       	and	r24, r24
    2bb8:	39 f4       	brne	.+14     	; 0x2bc8 <Timer1_init+0x72>
		/* Enable Timer1 Overflow Interrupt */
		TIMSK |= (1<<TOIE0);
    2bba:	a9 e5       	ldi	r26, 0x59	; 89
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e9 e5       	ldi	r30, 0x59	; 89
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	81 60       	ori	r24, 0x01	; 1
    2bc6:	8c 93       	st	X, r24
	}
	/* set prescaler in TCCR1B Register */
	TCCR1B |= (Config_Ptr->prescaler);
    2bc8:	ae e4       	ldi	r26, 0x4E	; 78
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ee e4       	ldi	r30, 0x4E	; 78
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	90 81       	ld	r25, Z
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	84 81       	ldd	r24, Z+4	; 0x04
    2bd8:	89 2b       	or	r24, r25
    2bda:	8c 93       	st	X, r24
	/* bits FOC1A and FOC1B must be set to specify a non-PWM mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2bdc:	ef e4       	ldi	r30, 0x4F	; 79
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	8c e0       	ldi	r24, 0x0C	; 12
    2be2:	80 83       	st	Z, r24
}
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <Timer1_deInit>:

/*
 * Description: Function to de-initialize timer1
 */
void Timer1_deInit(void){
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2bf6:	ec e4       	ldi	r30, 0x4C	; 76
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	11 82       	std	Z+1, r1	; 0x01
    2bfc:	10 82       	st	Z, r1
	OCR1A = 0;
    2bfe:	ea e4       	ldi	r30, 0x4A	; 74
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	11 82       	std	Z+1, r1	; 0x01
    2c04:	10 82       	st	Z, r1
	TCCR1A = 0;
    2c06:	ef e4       	ldi	r30, 0x4F	; 79
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	10 82       	st	Z, r1
	TCCR1B = 0;
    2c0c:	ee e4       	ldi	r30, 0x4E	; 78
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE0);
    2c12:	a9 e5       	ldi	r26, 0x59	; 89
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	e9 e5       	ldi	r30, 0x59	; 89
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	8e 7f       	andi	r24, 0xFE	; 254
    2c1e:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);
    2c20:	a9 e5       	ldi	r26, 0x59	; 89
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e9 e5       	ldi	r30, 0x59	; 89
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	8f 7e       	andi	r24, 0xEF	; 239
    2c2c:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1B);
    2c2e:	a9 e5       	ldi	r26, 0x59	; 89
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e9 e5       	ldi	r30, 0x59	; 89
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	87 7f       	andi	r24, 0xF7	; 247
    2c3a:	8c 93       	st	X, r24
}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <UART_init+0x6>
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <UART_init+0x8>
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2c52:	1a 82       	std	Y+2, r1	; 0x02
    2c54:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c56:	eb e2       	ldi	r30, 0x2B	; 43
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	80 83       	st	Z, r24
	 * UCSZ2 = configurations pointer value
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((Config_Ptr->bit_data &0x04) << UCSZ2);
    2c5e:	aa e2       	ldi	r26, 0x2A	; 42
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	eb 81       	ldd	r30, Y+3	; 0x03
    2c64:	fc 81       	ldd	r31, Y+4	; 0x04
    2c66:	80 81       	ld	r24, Z
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	84 70       	andi	r24, 0x04	; 4
    2c6e:	90 70       	andi	r25, 0x00	; 0
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	88 61       	ori	r24, 0x18	; 24
    2c7a:	8c 93       	st	X, r24
	 * USBS    =  Configurations pointer stop bits
	 * UCSZ1:0 = Configurations pointer bit data number
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data & 0x03) <<UCSZ0) | (Config_Ptr->parity << UPM0) | (Config_Ptr->stop_bit << USBS);
    2c7c:	a0 e4       	ldi	r26, 0x40	; 64
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	eb 81       	ldd	r30, Y+3	; 0x03
    2c82:	fc 81       	ldd	r31, Y+4	; 0x04
    2c84:	80 81       	ld	r24, Z
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	83 70       	andi	r24, 0x03	; 3
    2c8c:	90 70       	andi	r25, 0x00	; 0
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	28 2f       	mov	r18, r24
    2c94:	20 68       	ori	r18, 0x80	; 128
    2c96:	eb 81       	ldd	r30, Y+3	; 0x03
    2c98:	fc 81       	ldd	r31, Y+4	; 0x04
    2c9a:	81 81       	ldd	r24, Z+1	; 0x01
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	82 95       	swap	r24
    2ca2:	92 95       	swap	r25
    2ca4:	90 7f       	andi	r25, 0xF0	; 240
    2ca6:	98 27       	eor	r25, r24
    2ca8:	80 7f       	andi	r24, 0xF0	; 240
    2caa:	98 27       	eor	r25, r24
    2cac:	28 2b       	or	r18, r24
    2cae:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	88 2f       	mov	r24, r24
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	82 2b       	or	r24, r18
    2cc6:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2cc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cca:	fc 81       	ldd	r31, Y+4	; 0x04
    2ccc:	83 81       	ldd	r24, Z+3	; 0x03
    2cce:	94 81       	ldd	r25, Z+4	; 0x04
    2cd0:	cc 01       	movw	r24, r24
    2cd2:	a0 e0       	ldi	r26, 0x00	; 0
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	aa 1f       	adc	r26, r26
    2cdc:	bb 1f       	adc	r27, r27
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	aa 1f       	adc	r26, r26
    2ce4:	bb 1f       	adc	r27, r27
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	aa 1f       	adc	r26, r26
    2cec:	bb 1f       	adc	r27, r27
    2cee:	9c 01       	movw	r18, r24
    2cf0:	ad 01       	movw	r20, r26
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	92 e1       	ldi	r25, 0x12	; 18
    2cf6:	aa e7       	ldi	r26, 0x7A	; 122
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__udivmodsi4>
    2d02:	da 01       	movw	r26, r20
    2d04:	c9 01       	movw	r24, r18
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2d0c:	e0 e4       	ldi	r30, 0x40	; 64
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	89 2f       	mov	r24, r25
    2d16:	99 27       	eor	r25, r25
    2d18:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d1a:	e9 e2       	ldi	r30, 0x29	; 41
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	80 83       	st	Z, r24
}
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret

00002d30 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	0f 92       	push	r0
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d3c:	eb e2       	ldi	r30, 0x2B	; 43
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	80 72       	andi	r24, 0x20	; 32
    2d48:	90 70       	andi	r25, 0x00	; 0
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	b9 f3       	breq	.-18     	; 0x2d3c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d4e:	ec e2       	ldi	r30, 0x2C	; 44
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d56:	0f 90       	pop	r0
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d66:	eb e2       	ldi	r30, 0x2B	; 43
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	88 23       	and	r24, r24
    2d6e:	dc f7       	brge	.-10     	; 0x2d66 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2d70:	ec e2       	ldi	r30, 0x2C	; 44
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
}
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <UART_sendString+0x6>
    2d82:	0f 92       	push	r0
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	9b 83       	std	Y+3, r25	; 0x03
    2d8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d8c:	19 82       	std	Y+1, r1	; 0x01
    2d8e:	0e c0       	rjmp	.+28     	; 0x2dac <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e2 0f       	add	r30, r18
    2d9e:	f3 1f       	adc	r31, r19
    2da0:	80 81       	ld	r24, Z
    2da2:	0e 94 98 16 	call	0x2d30	; 0x2d30 <UART_sendByte>
		i++;
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	8f 5f       	subi	r24, 0xFF	; 255
    2daa:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	fc 01       	movw	r30, r24
    2db8:	e2 0f       	add	r30, r18
    2dba:	f3 1f       	adc	r31, r19
    2dbc:	80 81       	ld	r24, Z
    2dbe:	88 23       	and	r24, r24
    2dc0:	39 f7       	brne	.-50     	; 0x2d90 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <UART_receiveString+0xa>
    2dd8:	0f 92       	push	r0
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	9b 83       	std	Y+3, r25	; 0x03
    2de0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2de2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	8c 01       	movw	r16, r24
    2df0:	02 0f       	add	r16, r18
    2df2:	13 1f       	adc	r17, r19
    2df4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UART_recieveByte>
    2df8:	f8 01       	movw	r30, r16
    2dfa:	80 83       	st	Z, r24
    2dfc:	0f c0       	rjmp	.+30     	; 0x2e1c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	28 2f       	mov	r18, r24
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0e:	8c 01       	movw	r16, r24
    2e10:	02 0f       	add	r16, r18
    2e12:	13 1f       	adc	r17, r19
    2e14:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UART_recieveByte>
    2e18:	f8 01       	movw	r30, r16
    2e1a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	9b 81       	ldd	r25, Y+3	; 0x03
    2e26:	fc 01       	movw	r30, r24
    2e28:	e2 0f       	add	r30, r18
    2e2a:	f3 1f       	adc	r31, r19
    2e2c:	80 81       	ld	r24, Z
    2e2e:	83 32       	cpi	r24, 0x23	; 35
    2e30:	31 f7       	brne	.-52     	; 0x2dfe <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	e2 0f       	add	r30, r18
    2e40:	f3 1f       	adc	r31, r19
    2e42:	10 82       	st	Z, r1
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	08 95       	ret

00002e54 <__udivmodsi4>:
    2e54:	a1 e2       	ldi	r26, 0x21	; 33
    2e56:	1a 2e       	mov	r1, r26
    2e58:	aa 1b       	sub	r26, r26
    2e5a:	bb 1b       	sub	r27, r27
    2e5c:	fd 01       	movw	r30, r26
    2e5e:	0d c0       	rjmp	.+26     	; 0x2e7a <__udivmodsi4_ep>

00002e60 <__udivmodsi4_loop>:
    2e60:	aa 1f       	adc	r26, r26
    2e62:	bb 1f       	adc	r27, r27
    2e64:	ee 1f       	adc	r30, r30
    2e66:	ff 1f       	adc	r31, r31
    2e68:	a2 17       	cp	r26, r18
    2e6a:	b3 07       	cpc	r27, r19
    2e6c:	e4 07       	cpc	r30, r20
    2e6e:	f5 07       	cpc	r31, r21
    2e70:	20 f0       	brcs	.+8      	; 0x2e7a <__udivmodsi4_ep>
    2e72:	a2 1b       	sub	r26, r18
    2e74:	b3 0b       	sbc	r27, r19
    2e76:	e4 0b       	sbc	r30, r20
    2e78:	f5 0b       	sbc	r31, r21

00002e7a <__udivmodsi4_ep>:
    2e7a:	66 1f       	adc	r22, r22
    2e7c:	77 1f       	adc	r23, r23
    2e7e:	88 1f       	adc	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	1a 94       	dec	r1
    2e84:	69 f7       	brne	.-38     	; 0x2e60 <__udivmodsi4_loop>
    2e86:	60 95       	com	r22
    2e88:	70 95       	com	r23
    2e8a:	80 95       	com	r24
    2e8c:	90 95       	com	r25
    2e8e:	9b 01       	movw	r18, r22
    2e90:	ac 01       	movw	r20, r24
    2e92:	bd 01       	movw	r22, r26
    2e94:	cf 01       	movw	r24, r30
    2e96:	08 95       	ret

00002e98 <__prologue_saves__>:
    2e98:	2f 92       	push	r2
    2e9a:	3f 92       	push	r3
    2e9c:	4f 92       	push	r4
    2e9e:	5f 92       	push	r5
    2ea0:	6f 92       	push	r6
    2ea2:	7f 92       	push	r7
    2ea4:	8f 92       	push	r8
    2ea6:	9f 92       	push	r9
    2ea8:	af 92       	push	r10
    2eaa:	bf 92       	push	r11
    2eac:	cf 92       	push	r12
    2eae:	df 92       	push	r13
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	ca 1b       	sub	r28, r26
    2ec2:	db 0b       	sbc	r29, r27
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	09 94       	ijmp

00002ed0 <__epilogue_restores__>:
    2ed0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ed2:	39 88       	ldd	r3, Y+17	; 0x11
    2ed4:	48 88       	ldd	r4, Y+16	; 0x10
    2ed6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ed8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eda:	7d 84       	ldd	r7, Y+13	; 0x0d
    2edc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ede:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ee0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ee2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ee4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ee6:	df 80       	ldd	r13, Y+7	; 0x07
    2ee8:	ee 80       	ldd	r14, Y+6	; 0x06
    2eea:	fd 80       	ldd	r15, Y+5	; 0x05
    2eec:	0c 81       	ldd	r16, Y+4	; 0x04
    2eee:	1b 81       	ldd	r17, Y+3	; 0x03
    2ef0:	aa 81       	ldd	r26, Y+2	; 0x02
    2ef2:	b9 81       	ldd	r27, Y+1	; 0x01
    2ef4:	ce 0f       	add	r28, r30
    2ef6:	d1 1d       	adc	r29, r1
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	ed 01       	movw	r28, r26
    2f04:	08 95       	ret

00002f06 <itoa>:
    2f06:	fb 01       	movw	r30, r22
    2f08:	9f 01       	movw	r18, r30
    2f0a:	e8 94       	clt
    2f0c:	42 30       	cpi	r20, 0x02	; 2
    2f0e:	c4 f0       	brlt	.+48     	; 0x2f40 <itoa+0x3a>
    2f10:	45 32       	cpi	r20, 0x25	; 37
    2f12:	b4 f4       	brge	.+44     	; 0x2f40 <itoa+0x3a>
    2f14:	4a 30       	cpi	r20, 0x0A	; 10
    2f16:	29 f4       	brne	.+10     	; 0x2f22 <itoa+0x1c>
    2f18:	97 fb       	bst	r25, 7
    2f1a:	1e f4       	brtc	.+6      	; 0x2f22 <itoa+0x1c>
    2f1c:	90 95       	com	r25
    2f1e:	81 95       	neg	r24
    2f20:	9f 4f       	sbci	r25, 0xFF	; 255
    2f22:	64 2f       	mov	r22, r20
    2f24:	77 27       	eor	r23, r23
    2f26:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__udivmodhi4>
    2f2a:	80 5d       	subi	r24, 0xD0	; 208
    2f2c:	8a 33       	cpi	r24, 0x3A	; 58
    2f2e:	0c f0       	brlt	.+2      	; 0x2f32 <itoa+0x2c>
    2f30:	89 5d       	subi	r24, 0xD9	; 217
    2f32:	81 93       	st	Z+, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	a1 f7       	brne	.-24     	; 0x2f22 <itoa+0x1c>
    2f3a:	16 f4       	brtc	.+4      	; 0x2f40 <itoa+0x3a>
    2f3c:	5d e2       	ldi	r21, 0x2D	; 45
    2f3e:	51 93       	st	Z+, r21
    2f40:	10 82       	st	Z, r1
    2f42:	c9 01       	movw	r24, r18
    2f44:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <strrev>

00002f48 <strrev>:
    2f48:	dc 01       	movw	r26, r24
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	67 2f       	mov	r22, r23
    2f4e:	71 91       	ld	r23, Z+
    2f50:	77 23       	and	r23, r23
    2f52:	e1 f7       	brne	.-8      	; 0x2f4c <strrev+0x4>
    2f54:	32 97       	sbiw	r30, 0x02	; 2
    2f56:	04 c0       	rjmp	.+8      	; 0x2f60 <strrev+0x18>
    2f58:	7c 91       	ld	r23, X
    2f5a:	6d 93       	st	X+, r22
    2f5c:	70 83       	st	Z, r23
    2f5e:	62 91       	ld	r22, -Z
    2f60:	ae 17       	cp	r26, r30
    2f62:	bf 07       	cpc	r27, r31
    2f64:	c8 f3       	brcs	.-14     	; 0x2f58 <strrev+0x10>
    2f66:	08 95       	ret

00002f68 <__udivmodhi4>:
    2f68:	aa 1b       	sub	r26, r26
    2f6a:	bb 1b       	sub	r27, r27
    2f6c:	51 e1       	ldi	r21, 0x11	; 17
    2f6e:	07 c0       	rjmp	.+14     	; 0x2f7e <__udivmodhi4_ep>

00002f70 <__udivmodhi4_loop>:
    2f70:	aa 1f       	adc	r26, r26
    2f72:	bb 1f       	adc	r27, r27
    2f74:	a6 17       	cp	r26, r22
    2f76:	b7 07       	cpc	r27, r23
    2f78:	10 f0       	brcs	.+4      	; 0x2f7e <__udivmodhi4_ep>
    2f7a:	a6 1b       	sub	r26, r22
    2f7c:	b7 0b       	sbc	r27, r23

00002f7e <__udivmodhi4_ep>:
    2f7e:	88 1f       	adc	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	5a 95       	dec	r21
    2f84:	a9 f7       	brne	.-22     	; 0x2f70 <__udivmodhi4_loop>
    2f86:	80 95       	com	r24
    2f88:	90 95       	com	r25
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	08 95       	ret

00002f90 <_exit>:
    2f90:	f8 94       	cli

00002f92 <__stop_program>:
    2f92:	ff cf       	rjmp	.-2      	; 0x2f92 <__stop_program>
