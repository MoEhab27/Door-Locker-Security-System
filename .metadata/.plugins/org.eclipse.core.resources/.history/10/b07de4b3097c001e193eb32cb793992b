#include "dc_motor.h"
#include "pwm.h"
#include "uart.h"
#include "buzzer.h"
#include <util/delay.h>
#include "uart_communication_codes.h"
#include "external_eeprom.h"
#include "timer1.h"
#include "gpio.h"

#define EEPROM_PASSWORD_START_ADDRESS 0x0AF2


/* Initialize Timer 1 Configurations */
Timer1_ConfigType timer1_configurations = {INITIAL_VALUE_FOR_SECOND, TICKS_PER_SECOND,
		TIMER1_1024_PRESCALER, TIMER1_COMP_MODE};


uint8 g_timer_ticks = 0;
uint8 passwords[11];

bool validate_passwords(uint8* passwords);
void store_password(uint8* passwords);
bool login_verify(void);
void open_door(void);
void timer_increase_ticks(void);
void activate_alarm(void);

int main(){
	SREG |= (1 << 7);

	UART_ConfigType uart_configurations = {UART_BIT_DATA_8_BITS, UART_PARIY_DISABLED,
	UART_STOP_BIT_ONE_BIT, UART_BAUD_RATE_9600};
	UART_init(&uart_configurations);
	DcMotor_Init();
	Buzzer_init();
	Buzzer_on();
	_delay_ms(1000);
	Buzzer_off();
	GPIO_setupPortDirection(PORTA, PORT_OUTPUT);
	GPIO_writePort(PORTA, LOGIC_LOW);

	uint8 command;
	/* Validate the passwords created when the system runs first*/
	/* Every time validation fails we validate the new passwords */
	while (validate_passwords(passwords) != TRUE){}
	/* If the validation succeeds we store the password in the memory */
	store_password(passwords);


	for(;;){
		command = UART_recieveByte();
		if(command == UART_LOGIN){
			if(login_verify()){
				UART_sendByte(UART_LOGIN_SUCCESS);
			}
			else{
				UART_sendByte(UART_LOGIN_FAIL);
			}
		}
		else if(command == UART_OPEN_DOOR){
			open_door();
		}
		else if(command == UART_ACTIVATE_ALARM){
			activate_alarm();
		}

	}
}


void activate_alarm(void){
	g_timer_ticks = 0;
	Timer1_setCallBack(timer_increase_ticks);
	Timer1_init(&timer1_configurations);
	Buzzer_on();
	while(g_timer_ticks < 3){}
	Buzzer_off();
	g_timer_ticks = 0;
}


bool validate_passwords(uint8* passwords){
	/* Wait for syncing command from the HMI ECU */
	while(UART_recieveByte() != UART_NEW_PASSWORD){}
	/* Confirm Syncing */
	UART_sendByte(UART_CONFIRMATION);
	/* Receive passwords */
	UART_receiveString(passwords);
	/* Check if the first password is the same as the second */
	for(int i = 0; i < 5; i++){
		if(passwords[i] != passwords[i + 5]){
			UART_sendByte(UART_INVALID_PASSWORDS);
			return FALSE;
		}
	}
	UART_sendByte(UART_VALID_PASSWORDS);
	return TRUE;
}

bool login_verify(){
	uint8 stored_password[5];
	uint8 received_password[6];
	uint8 data;
	for(int i = 0; i < 5; i++){
		EEPROM_readByte(EEPROM_PASSWORD_START_ADDRESS + i, &data);
		_delay_ms(10);
		stored_password[i] = data;
	}
	UART_sendByte(UART_CONFIRMATION);
	UART_receiveString(received_password);
	for(int i = 0; i < 5; i++){
		if(stored_password[i] != received_password[i]){
			UART_sendByte(UART_LOGIN_FAIL);
			return FALSE;
		}
	}
	UART_sendByte(UART_LOGIN_SUCCESS);
	return TRUE;
}

void open_door(void){
	g_timer_ticks = 0;
	/* Start the timer */
	Timer1_init(&timer1_configurations);
	Timer1_setCallBack(timer_increase_ticks);
	/* Rotate the motor 15 seconds clockwise */
	DcMotor_Rotate(DC_MOTOR_CLOCKWISE, 100);
	while(g_timer_ticks < 5){}
	g_timer_ticks = 0;
	/* hold the motor */
	DcMotor_Rotate(DC_MOTOR_STOP, 0);
	while(g_timer_ticks  < 3){}
	g_timer_ticks = 0;
	/* Rotate the motor 15 seconds anti clockwise */
	DcMotor_Rotate(DC_MOTOR_ANTI_CLOCKWISE, 100);
	while(g_timer_ticks < 5){}
	/* stop the motor */
	DcMotor_Rotate(DC_MOTOR_STOP, 0);
	/* stop the timer */
	g_timer_ticks = 0;
	Timer1_deInit();
}

void store_password(uint8* passwords){
	for(int i = 0; i < 5; i++){
		EEPROM_writeByte(EEPROM_PASSWORD_START_ADDRESS + i, passwords[i]);
		_delay_ms(10);
	}
}

void timer_increase_ticks(void){
	g_timer_ticks++;
}



