#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer1.h"
#include "common_macros.h"
#include "std_types.h"



/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
	if(g_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR(TIMER1_COMPA_vect)
{
	if(g_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_setCallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
}


void Timer1_init(const Timer1_ConfigType * Config_Ptr){
	/* Set the initial value in TCNT1 */
	TCNT1 = Config_Ptr->initial_value;

	if(Config_Ptr->mode == TIMER1_COMP_MODE){
		/*Set compare value in OCR1A reg*/
		OCR1A  = Config_Ptr->compare_value;
		/* enable compare mode interrupt */
		TIMSK |= (1<<OCIE1A);
		/*WGM12 bit must be set in TCCR1B in CTC mode*/
		TCCR1B |= (1<<WGM12);
	}
	else if (Config_Ptr->mode == TIMER1_NORMAL_MODE){
		/* Enable Timer1 Overflow Interrupt */
		TIMSK |= (1<<TOIE0);
	}
	/* set prescaler in TCCR1B Register */
	TCCR1B |= (Config_Ptr->prescaler);
	/* bits FOC1A and FOC1B must be set to specify a non-PWM mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
}


void Timer1_deInit(void){
	TCNT1 = 0;
	OCR1A = 0;
	TCCR1A = 0;
	TCCR1B = 0;
	TIMSK &= ~(1<<TOIE0);
	TIMSK &= ~(1<<OCIE1A);
	TIMSK &= ~(1<<OCIE1B);
}


