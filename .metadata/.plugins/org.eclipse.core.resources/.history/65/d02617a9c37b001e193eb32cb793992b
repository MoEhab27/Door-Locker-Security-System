#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer1.h"
#include "common_macros.h"
#include "std_types.h"



/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
	if(g_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR(TIMER1_COMPA_vect)
{
	if(g_callBackPtr != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_setCallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
}


void Timer1_init(const Timer1_ConfigType * Config_Ptr){
	TCNT1 = Config_Ptr->initial_value;
	if(Config_Ptr->mode == TIMER1_COMP_MODE){
		OCR0  = Config_Ptr->compare_value; //  set compare value
		TIMSK |= (1<<OCIE1A);  // enable compare mode interrupt
		TCCR0 = (1<<FOC0) | (Config_Ptr->prescaler) | (1<<WGM01);
	}
	else if (Config_Ptr->mode == TIMER1_NORMAL_MODE){
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
		TCCR0 = (1<<FOC0) | (Config_Ptr->prescaler);
	}
}



